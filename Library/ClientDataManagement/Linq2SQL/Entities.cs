#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CAS.AgileWorkloadTracker.Client.DataManagement.Linq2SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class AWTARCHIV : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArchivingLogs(ArchivingLogs instance);
    partial void UpdateArchivingLogs(ArchivingLogs instance);
    partial void DeleteArchivingLogs(ArchivingLogs instance);
    partial void InsertArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void UpdateArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void DeleteArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertContracts(Contracts instance);
    partial void UpdateContracts(Contracts instance);
    partial void DeleteContracts(Contracts instance);
    partial void InsertEstimation(Estimation instance);
    partial void UpdateEstimation(Estimation instance);
    partial void DeleteEstimation(Estimation instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertMilestone(Milestone instance);
    partial void UpdateMilestone(Milestone instance);
    partial void DeleteMilestone(Milestone instance);
    partial void InsertPartners(Partners instance);
    partial void UpdatePartners(Partners instance);
    partial void DeletePartners(Partners instance);
    partial void InsertPriority(Priority instance);
    partial void UpdatePriority(Priority instance);
    partial void DeletePriority(Priority instance);
    partial void InsertProjects(Projects instance);
    partial void UpdateProjects(Projects instance);
    partial void DeleteProjects(Projects instance);
    partial void InsertRequirements(Requirements instance);
    partial void UpdateRequirements(Requirements instance);
    partial void DeleteRequirements(Requirements instance);
    partial void InsertResolution(Resolution instance);
    partial void UpdateResolution(Resolution instance);
    partial void DeleteResolution(Resolution instance);
    partial void InsertSPStatus(SPStatus instance);
    partial void UpdateSPStatus(SPStatus instance);
    partial void DeleteSPStatus(SPStatus instance);
    partial void InsertStage(Stage instance);
    partial void UpdateStage(Stage instance);
    partial void DeleteStage(Stage instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    partial void InsertWorkload(Workload instance);
    partial void UpdateWorkload(Workload instance);
    partial void DeleteWorkload(Workload instance);
    #endregion
		
		public AWTARCHIV(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AWTARCHIV(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AWTARCHIV(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AWTARCHIV(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ArchivingLogs> ArchivingLogs
		{
			get
			{
				return this.GetTable<ArchivingLogs>();
			}
		}
		
		public System.Data.Linq.Table<ArchivingOperationLogs> ArchivingOperationLogs
		{
			get
			{
				return this.GetTable<ArchivingOperationLogs>();
			}
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Contracts> Contracts
		{
			get
			{
				return this.GetTable<Contracts>();
			}
		}
		
		public System.Data.Linq.Table<Estimation> Estimation
		{
			get
			{
				return this.GetTable<Estimation>();
			}
		}
		
		public System.Data.Linq.Table<History> History
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<Milestone> Milestone
		{
			get
			{
				return this.GetTable<Milestone>();
			}
		}
		
		public System.Data.Linq.Table<Partners> Partners
		{
			get
			{
				return this.GetTable<Partners>();
			}
		}
		
		public System.Data.Linq.Table<Priority> Priority
		{
			get
			{
				return this.GetTable<Priority>();
			}
		}
		
		public System.Data.Linq.Table<Projects> Projects
		{
			get
			{
				return this.GetTable<Projects>();
			}
		}
		
		public System.Data.Linq.Table<Requirements> Requirements
		{
			get
			{
				return this.GetTable<Requirements>();
			}
		}
		
		public System.Data.Linq.Table<Resolution> Resolution
		{
			get
			{
				return this.GetTable<Resolution>();
			}
		}
		
		public System.Data.Linq.Table<SPStatus> SPStatus
		{
			get
			{
				return this.GetTable<SPStatus>();
			}
		}
		
		public System.Data.Linq.Table<Stage> Stage
		{
			get
			{
				return this.GetTable<Stage>();
			}
		}
		
		public System.Data.Linq.Table<Task> Task
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Type> Type
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		public System.Data.Linq.Table<Workload> Workload
		{
			get
			{
				return this.GetTable<Workload>();
			}
		}
	}
	
	[Table(Name="dbo.ArchivingLogs")]
	public partial class ArchivingLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ListName;
		
		private int _ItemID;
		
		private System.DateTime _Date;
		
		private string _UserName;
		
		private bool _OnlySQL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public ArchivingLogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ListName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ArchivingOperationLogs")]
	public partial class ArchivingOperationLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Operation;
		
		private System.DateTime _Date;
		
		private string _UserName;
		
		private bool _OnlySQL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public ArchivingOperationLogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<int> _Category2ProjectsTitle;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Projects> _Projects;
		
		private EntitySet<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCategory2ProjectsTitleChanging(System.Nullable<int> value);
    partial void OnCategory2ProjectsTitleChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Category()
		{
			this._Projects = default(EntityRef<Projects>);
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Category2ProjectsTitle", DbType="Int")]
		public System.Nullable<int> Category2ProjectsTitle
		{
			get
			{
				return this._Category2ProjectsTitle;
			}
			set
			{
				if ((this._Category2ProjectsTitle != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory2ProjectsTitleChanging(value);
					this.SendPropertyChanging();
					this._Category2ProjectsTitle = value;
					this.SendPropertyChanged("Category2ProjectsTitle");
					this.OnCategory2ProjectsTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Category_Projects", Storage="_Projects", ThisKey="Category2ProjectsTitle", OtherKey="ID", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Category.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Category.Add(this);
						this._Category2ProjectsTitle = value.ID;
					}
					else
					{
						this._Category2ProjectsTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		[Association(Name="FK_Task_Category", Storage="_Task", ThisKey="ID", OtherKey="Task2CategoryTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Contracts")]
	public partial class Contracts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _Body;
		
		private System.Nullable<System.DateTime> _ContractDate;
		
		private System.Nullable<System.DateTime> _ContractEndDate;
		
		private string _ContractNumber;
		
		private string _ContractOffer;
		
		private System.Nullable<int> _Contracts2PartnersTitle;
		
		private string _ContractSubject;
		
		private System.Nullable<double> _ContractValue;
		
		private System.Nullable<System.DateTime> _ContractWarrantyDate;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Currency;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Partners> _Partners;
		
		private EntitySet<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnContractDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractDateChanged();
    partial void OnContractEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractEndDateChanged();
    partial void OnContractNumberChanging(string value);
    partial void OnContractNumberChanged();
    partial void OnContractOfferChanging(string value);
    partial void OnContractOfferChanged();
    partial void OnContracts2PartnersTitleChanging(System.Nullable<int> value);
    partial void OnContracts2PartnersTitleChanged();
    partial void OnContractSubjectChanging(string value);
    partial void OnContractSubjectChanged();
    partial void OnContractValueChanging(System.Nullable<double> value);
    partial void OnContractValueChanged();
    partial void OnContractWarrantyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractWarrantyDateChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Contracts()
		{
			this._Partners = default(EntityRef<Partners>);
			this._Projects = new EntitySet<Projects>(new Action<Projects>(this.attach_Projects), new Action<Projects>(this.detach_Projects));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_ContractDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractDate
		{
			get
			{
				return this._ContractDate;
			}
			set
			{
				if ((this._ContractDate != value))
				{
					this.OnContractDateChanging(value);
					this.SendPropertyChanging();
					this._ContractDate = value;
					this.SendPropertyChanged("ContractDate");
					this.OnContractDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContractEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractEndDate
		{
			get
			{
				return this._ContractEndDate;
			}
			set
			{
				if ((this._ContractEndDate != value))
				{
					this.OnContractEndDateChanging(value);
					this.SendPropertyChanging();
					this._ContractEndDate = value;
					this.SendPropertyChanged("ContractEndDate");
					this.OnContractEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContractNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ContractNumber
		{
			get
			{
				return this._ContractNumber;
			}
			set
			{
				if ((this._ContractNumber != value))
				{
					this.OnContractNumberChanging(value);
					this.SendPropertyChanging();
					this._ContractNumber = value;
					this.SendPropertyChanged("ContractNumber");
					this.OnContractNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ContractOffer", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ContractOffer
		{
			get
			{
				return this._ContractOffer;
			}
			set
			{
				if ((this._ContractOffer != value))
				{
					this.OnContractOfferChanging(value);
					this.SendPropertyChanging();
					this._ContractOffer = value;
					this.SendPropertyChanged("ContractOffer");
					this.OnContractOfferChanged();
				}
			}
		}
		
		[Column(Storage="_Contracts2PartnersTitle", DbType="Int")]
		public System.Nullable<int> Contracts2PartnersTitle
		{
			get
			{
				return this._Contracts2PartnersTitle;
			}
			set
			{
				if ((this._Contracts2PartnersTitle != value))
				{
					if (this._Partners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContracts2PartnersTitleChanging(value);
					this.SendPropertyChanging();
					this._Contracts2PartnersTitle = value;
					this.SendPropertyChanged("Contracts2PartnersTitle");
					this.OnContracts2PartnersTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ContractSubject", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ContractSubject
		{
			get
			{
				return this._ContractSubject;
			}
			set
			{
				if ((this._ContractSubject != value))
				{
					this.OnContractSubjectChanging(value);
					this.SendPropertyChanging();
					this._ContractSubject = value;
					this.SendPropertyChanged("ContractSubject");
					this.OnContractSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_ContractValue", DbType="Float")]
		public System.Nullable<double> ContractValue
		{
			get
			{
				return this._ContractValue;
			}
			set
			{
				if ((this._ContractValue != value))
				{
					this.OnContractValueChanging(value);
					this.SendPropertyChanging();
					this._ContractValue = value;
					this.SendPropertyChanged("ContractValue");
					this.OnContractValueChanged();
				}
			}
		}
		
		[Column(Storage="_ContractWarrantyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractWarrantyDate
		{
			get
			{
				return this._ContractWarrantyDate;
			}
			set
			{
				if ((this._ContractWarrantyDate != value))
				{
					this.OnContractWarrantyDateChanging(value);
					this.SendPropertyChanging();
					this._ContractWarrantyDate = value;
					this.SendPropertyChanged("ContractWarrantyDate");
					this.OnContractWarrantyDateChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Contracts_Partners", Storage="_Partners", ThisKey="Contracts2PartnersTitle", OtherKey="ID", IsForeignKey=true)]
		public Partners Partners
		{
			get
			{
				return this._Partners.Entity;
			}
			set
			{
				Partners previousValue = this._Partners.Entity;
				if (((previousValue != value) 
							|| (this._Partners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partners.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Partners.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._Contracts2PartnersTitle = value.ID;
					}
					else
					{
						this._Contracts2PartnersTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partners");
				}
			}
		}
		
		[Association(Name="FK_Projects_Contracts", Storage="_Projects", ThisKey="ID", OtherKey="Project2ContractTitle", DeleteRule="NO ACTION")]
		public EntitySet<Projects> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Contracts = this;
		}
		
		private void detach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Contracts = null;
		}
	}
	
	[Table(Name="dbo.Estimation")]
	public partial class Estimation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AssignedTo;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private System.Nullable<double> _EstimatedWorkload;
		
		private System.Nullable<int> _Estimation2ProjectTitle;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignedToChanging(string value);
    partial void OnAssignedToChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEstimatedWorkloadChanging(System.Nullable<double> value);
    partial void OnEstimatedWorkloadChanged();
    partial void OnEstimation2ProjectTitleChanging(System.Nullable<int> value);
    partial void OnEstimation2ProjectTitleChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Estimation()
		{
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}
		
		[Column(Storage="_AssignedTo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedWorkload", DbType="Float")]
		public System.Nullable<double> EstimatedWorkload
		{
			get
			{
				return this._EstimatedWorkload;
			}
			set
			{
				if ((this._EstimatedWorkload != value))
				{
					this.OnEstimatedWorkloadChanging(value);
					this.SendPropertyChanging();
					this._EstimatedWorkload = value;
					this.SendPropertyChanged("EstimatedWorkload");
					this.OnEstimatedWorkloadChanged();
				}
			}
		}
		
		[Column(Storage="_Estimation2ProjectTitle", DbType="Int")]
		public System.Nullable<int> Estimation2ProjectTitle
		{
			get
			{
				return this._Estimation2ProjectTitle;
			}
			set
			{
				if ((this._Estimation2ProjectTitle != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstimation2ProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._Estimation2ProjectTitle = value;
					this.SendPropertyChanged("Estimation2ProjectTitle");
					this.OnEstimation2ProjectTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Estimation_Projects", Storage="_Projects", ThisKey="Estimation2ProjectTitle", OtherKey="ID", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Estimation.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Estimation.Add(this);
						this._Estimation2ProjectTitle = value.ID;
					}
					else
					{
						this._Estimation2ProjectTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ListName;
		
		private int _ItemID;
		
		private string _FieldName;
		
		private string _FieldValue;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private bool _OnlySQL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldValueChanging(string value);
    partial void OnFieldValueChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public History()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ListName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_FieldValue", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FieldValue
		{
			get
			{
				return this._FieldValue;
			}
			set
			{
				if ((this._FieldValue != value))
				{
					this.OnFieldValueChanging(value);
					this.SendPropertyChanging();
					this._FieldValue = value;
					this.SendPropertyChanged("FieldValue");
					this.OnFieldValueChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Milestone")]
	public partial class Milestone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<double> _AcceptedHours;
		
		private System.Nullable<bool> _Active;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _BaselineEnd;
		
		private System.Nullable<System.DateTime> _BaselineStart;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<bool> _Default;
		
		private string _Editor;
		
		private System.Nullable<double> _EstimatedHours;
		
		private int _ID;
		
		private System.Nullable<int> _Milestone2ProjectTitle;
		
		private System.Nullable<int> _Milestone2StageTitle;
		
		private string _MilestoneDescription;
		
		private System.Nullable<System.DateTime> _MilestoneEnd;
		
		private System.Nullable<double> _MilestoneHours;
		
		private System.Nullable<System.DateTime> _MilestoneStart;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<double> _SortOrder;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Projects> _Projects;
		
		private EntityRef<Stage> _Stage;
		
		private EntitySet<Requirements> _Requirements;
		
		private EntitySet<Task> _Task;
		
		private EntitySet<Task> _Task_MilestoneResolved;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcceptedHoursChanging(System.Nullable<double> value);
    partial void OnAcceptedHoursChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnBaselineEndChanging(System.Nullable<System.DateTime> value);
    partial void OnBaselineEndChanged();
    partial void OnBaselineStartChanging(System.Nullable<System.DateTime> value);
    partial void OnBaselineStartChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDefaultChanging(System.Nullable<bool> value);
    partial void OnDefaultChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEstimatedHoursChanging(System.Nullable<double> value);
    partial void OnEstimatedHoursChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMilestone2ProjectTitleChanging(System.Nullable<int> value);
    partial void OnMilestone2ProjectTitleChanged();
    partial void OnMilestone2StageTitleChanging(System.Nullable<int> value);
    partial void OnMilestone2StageTitleChanged();
    partial void OnMilestoneDescriptionChanging(string value);
    partial void OnMilestoneDescriptionChanged();
    partial void OnMilestoneEndChanging(System.Nullable<System.DateTime> value);
    partial void OnMilestoneEndChanged();
    partial void OnMilestoneHoursChanging(System.Nullable<double> value);
    partial void OnMilestoneHoursChanged();
    partial void OnMilestoneStartChanging(System.Nullable<System.DateTime> value);
    partial void OnMilestoneStartChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnSortOrderChanging(System.Nullable<double> value);
    partial void OnSortOrderChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Milestone()
		{
			this._Projects = default(EntityRef<Projects>);
			this._Stage = default(EntityRef<Stage>);
			this._Requirements = new EntitySet<Requirements>(new Action<Requirements>(this.attach_Requirements), new Action<Requirements>(this.detach_Requirements));
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			this._Task_MilestoneResolved = new EntitySet<Task>(new Action<Task>(this.attach_Task_MilestoneResolved), new Action<Task>(this.detach_Task_MilestoneResolved));
			OnCreated();
		}
		
		[Column(Storage="_AcceptedHours", DbType="Float")]
		public System.Nullable<double> AcceptedHours
		{
			get
			{
				return this._AcceptedHours;
			}
			set
			{
				if ((this._AcceptedHours != value))
				{
					this.OnAcceptedHoursChanging(value);
					this.SendPropertyChanging();
					this._AcceptedHours = value;
					this.SendPropertyChanged("AcceptedHours");
					this.OnAcceptedHoursChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_BaselineEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> BaselineEnd
		{
			get
			{
				return this._BaselineEnd;
			}
			set
			{
				if ((this._BaselineEnd != value))
				{
					this.OnBaselineEndChanging(value);
					this.SendPropertyChanging();
					this._BaselineEnd = value;
					this.SendPropertyChanged("BaselineEnd");
					this.OnBaselineEndChanged();
				}
			}
		}
		
		[Column(Storage="_BaselineStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> BaselineStart
		{
			get
			{
				return this._BaselineStart;
			}
			set
			{
				if ((this._BaselineStart != value))
				{
					this.OnBaselineStartChanging(value);
					this.SendPropertyChanging();
					this._BaselineStart = value;
					this.SendPropertyChanged("BaselineStart");
					this.OnBaselineStartChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Default", DbType="Bit")]
		public System.Nullable<bool> Default
		{
			get
			{
				return this._Default;
			}
			set
			{
				if ((this._Default != value))
				{
					this.OnDefaultChanging(value);
					this.SendPropertyChanging();
					this._Default = value;
					this.SendPropertyChanged("Default");
					this.OnDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedHours", DbType="Float")]
		public System.Nullable<double> EstimatedHours
		{
			get
			{
				return this._EstimatedHours;
			}
			set
			{
				if ((this._EstimatedHours != value))
				{
					this.OnEstimatedHoursChanging(value);
					this.SendPropertyChanging();
					this._EstimatedHours = value;
					this.SendPropertyChanged("EstimatedHours");
					this.OnEstimatedHoursChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Milestone2ProjectTitle", DbType="Int")]
		public System.Nullable<int> Milestone2ProjectTitle
		{
			get
			{
				return this._Milestone2ProjectTitle;
			}
			set
			{
				if ((this._Milestone2ProjectTitle != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMilestone2ProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._Milestone2ProjectTitle = value;
					this.SendPropertyChanged("Milestone2ProjectTitle");
					this.OnMilestone2ProjectTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Milestone2StageTitle", DbType="Int")]
		public System.Nullable<int> Milestone2StageTitle
		{
			get
			{
				return this._Milestone2StageTitle;
			}
			set
			{
				if ((this._Milestone2StageTitle != value))
				{
					if (this._Stage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMilestone2StageTitleChanging(value);
					this.SendPropertyChanging();
					this._Milestone2StageTitle = value;
					this.SendPropertyChanged("Milestone2StageTitle");
					this.OnMilestone2StageTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MilestoneDescription", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MilestoneDescription
		{
			get
			{
				return this._MilestoneDescription;
			}
			set
			{
				if ((this._MilestoneDescription != value))
				{
					this.OnMilestoneDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MilestoneDescription = value;
					this.SendPropertyChanged("MilestoneDescription");
					this.OnMilestoneDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MilestoneEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> MilestoneEnd
		{
			get
			{
				return this._MilestoneEnd;
			}
			set
			{
				if ((this._MilestoneEnd != value))
				{
					this.OnMilestoneEndChanging(value);
					this.SendPropertyChanging();
					this._MilestoneEnd = value;
					this.SendPropertyChanged("MilestoneEnd");
					this.OnMilestoneEndChanged();
				}
			}
		}
		
		[Column(Storage="_MilestoneHours", DbType="Float")]
		public System.Nullable<double> MilestoneHours
		{
			get
			{
				return this._MilestoneHours;
			}
			set
			{
				if ((this._MilestoneHours != value))
				{
					this.OnMilestoneHoursChanging(value);
					this.SendPropertyChanging();
					this._MilestoneHours = value;
					this.SendPropertyChanged("MilestoneHours");
					this.OnMilestoneHoursChanged();
				}
			}
		}
		
		[Column(Storage="_MilestoneStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> MilestoneStart
		{
			get
			{
				return this._MilestoneStart;
			}
			set
			{
				if ((this._MilestoneStart != value))
				{
					this.OnMilestoneStartChanging(value);
					this.SendPropertyChanging();
					this._MilestoneStart = value;
					this.SendPropertyChanged("MilestoneStart");
					this.OnMilestoneStartChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Float")]
		public System.Nullable<double> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Milestone_Projects", Storage="_Projects", ThisKey="Milestone2ProjectTitle", OtherKey="ID", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Milestone.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Milestone.Add(this);
						this._Milestone2ProjectTitle = value.ID;
					}
					else
					{
						this._Milestone2ProjectTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		[Association(Name="FK_Milestone_Stage", Storage="_Stage", ThisKey="Milestone2StageTitle", OtherKey="ID", IsForeignKey=true)]
		public Stage Stage
		{
			get
			{
				return this._Stage.Entity;
			}
			set
			{
				Stage previousValue = this._Stage.Entity;
				if (((previousValue != value) 
							|| (this._Stage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stage.Entity = null;
						previousValue.Milestone.Remove(this);
					}
					this._Stage.Entity = value;
					if ((value != null))
					{
						value.Milestone.Add(this);
						this._Milestone2StageTitle = value.ID;
					}
					else
					{
						this._Milestone2StageTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Stage");
				}
			}
		}
		
		[Association(Name="FK_Requirements_Milestone", Storage="_Requirements", ThisKey="ID", OtherKey="Requirements2MilestoneTitle", DeleteRule="NO ACTION")]
		public EntitySet<Requirements> Requirements
		{
			get
			{
				return this._Requirements;
			}
			set
			{
				this._Requirements.Assign(value);
			}
		}
		
		[Association(Name="FK_Task_MilestoneDefined", Storage="_Task", ThisKey="ID", OtherKey="Task2MilestoneDefinedInTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		[Association(Name="FK_Task_MilestoneResolved", Storage="_Task_MilestoneResolved", ThisKey="ID", OtherKey="Task2MilestoneResolvedInTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task_MilestoneResolved
		{
			get
			{
				return this._Task_MilestoneResolved;
			}
			set
			{
				this._Task_MilestoneResolved.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requirements(Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Milestone = this;
		}
		
		private void detach_Requirements(Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Milestone = null;
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Milestone = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Milestone = null;
		}
		
		private void attach_Task_MilestoneResolved(Task entity)
		{
			this.SendPropertyChanging();
			entity.Task2MilestoneResolvedInTitleMilestone = this;
		}
		
		private void detach_Task_MilestoneResolved(Task entity)
		{
			this.SendPropertyChanging();
			entity.Task2MilestoneResolvedInTitleMilestone = null;
		}
	}
	
	[Table(Name="dbo.Partners")]
	public partial class Partners : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _Body;
		
		private string _CellPhone;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private string _EMail;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private string _WorkAddress;
		
		private string _WorkCity;
		
		private string _WorkCountry;
		
		private string _WorkFax;
		
		private string _WorkPhone;
		
		private string _WorkZip;
		
		private bool _OnlySQL;
		
		private EntitySet<Contracts> _Contracts;
		
		private EntitySet<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWorkAddressChanging(string value);
    partial void OnWorkAddressChanged();
    partial void OnWorkCityChanging(string value);
    partial void OnWorkCityChanged();
    partial void OnWorkCountryChanging(string value);
    partial void OnWorkCountryChanged();
    partial void OnWorkFaxChanging(string value);
    partial void OnWorkFaxChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnWorkZipChanging(string value);
    partial void OnWorkZipChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Partners()
		{
			this._Contracts = new EntitySet<Contracts>(new Action<Contracts>(this.attach_Contracts), new Action<Contracts>(this.detach_Contracts));
			this._Projects = new EntitySet<Projects>(new Action<Projects>(this.attach_Projects), new Action<Projects>(this.detach_Projects));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_CellPhone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EMail", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_WorkAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkAddress
		{
			get
			{
				return this._WorkAddress;
			}
			set
			{
				if ((this._WorkAddress != value))
				{
					this.OnWorkAddressChanging(value);
					this.SendPropertyChanging();
					this._WorkAddress = value;
					this.SendPropertyChanged("WorkAddress");
					this.OnWorkAddressChanged();
				}
			}
		}
		
		[Column(Storage="_WorkCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkCity
		{
			get
			{
				return this._WorkCity;
			}
			set
			{
				if ((this._WorkCity != value))
				{
					this.OnWorkCityChanging(value);
					this.SendPropertyChanging();
					this._WorkCity = value;
					this.SendPropertyChanged("WorkCity");
					this.OnWorkCityChanged();
				}
			}
		}
		
		[Column(Storage="_WorkCountry", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkCountry
		{
			get
			{
				return this._WorkCountry;
			}
			set
			{
				if ((this._WorkCountry != value))
				{
					this.OnWorkCountryChanging(value);
					this.SendPropertyChanging();
					this._WorkCountry = value;
					this.SendPropertyChanged("WorkCountry");
					this.OnWorkCountryChanged();
				}
			}
		}
		
		[Column(Storage="_WorkFax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkFax
		{
			get
			{
				return this._WorkFax;
			}
			set
			{
				if ((this._WorkFax != value))
				{
					this.OnWorkFaxChanging(value);
					this.SendPropertyChanging();
					this._WorkFax = value;
					this.SendPropertyChanged("WorkFax");
					this.OnWorkFaxChanged();
				}
			}
		}
		
		[Column(Storage="_WorkPhone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_WorkZip", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkZip
		{
			get
			{
				return this._WorkZip;
			}
			set
			{
				if ((this._WorkZip != value))
				{
					this.OnWorkZipChanging(value);
					this.SendPropertyChanging();
					this._WorkZip = value;
					this.SendPropertyChanged("WorkZip");
					this.OnWorkZipChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Contracts_Partners", Storage="_Contracts", ThisKey="ID", OtherKey="Contracts2PartnersTitle", DeleteRule="NO ACTION")]
		public EntitySet<Contracts> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="FK_Projects_Partners", Storage="_Projects", ThisKey="ID", OtherKey="Project2PartnersTitle", DeleteRule="NO ACTION")]
		public EntitySet<Projects> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contracts entity)
		{
			this.SendPropertyChanging();
			entity.Partners = this;
		}
		
		private void detach_Contracts(Contracts entity)
		{
			this.SendPropertyChanging();
			entity.Partners = null;
		}
		
		private void attach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Partners = this;
		}
		
		private void detach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Partners = null;
		}
	}
	
	[Table(Name="dbo.Priority")]
	public partial class Priority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Priority()
		{
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Task_Priority", Storage="_Task", ThisKey="ID", OtherKey="Task2SPriorityTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Priority = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Priority = null;
		}
	}
	
	[Table(Name="dbo.Projects")]
	public partial class Projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<double> _AcceptedHours;
		
		private System.Nullable<bool> _Active;
		
		private string _AssignedTo;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _BaselineEnd;
		
		private System.Nullable<System.DateTime> _BaselineStart;
		
		private string _Body;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Currency;
		
		private string _Editor;
		
		private System.Nullable<double> _EstimatedHours;
		
		private int _ID;
		
		private System.Nullable<double> _MilestoneHours;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _PONumber;
		
		private System.Nullable<int> _Project2ContractTitle;
		
		private System.Nullable<int> _Project2PartnersTitle;
		
		private System.Nullable<int> _Project2StageTitle;
		
		private System.Nullable<double> _ProjectBudget;
		
		private System.Nullable<System.DateTime> _ProjectEndDate;
		
		private System.Nullable<double> _ProjectHours;
		
		private string _ProjectNumber;
		
		private System.Nullable<System.DateTime> _ProjectStartDate;
		
		private string _ProjectType;
		
		private System.Nullable<System.DateTime> _ProjectWarrantyDate;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Category> _Category;
		
		private EntitySet<Estimation> _Estimation;
		
		private EntitySet<Milestone> _Milestone;
		
		private EntityRef<Contracts> _Contracts;
		
		private EntityRef<Partners> _Partners;
		
		private EntityRef<Stage> _Stage;
		
		private EntitySet<Requirements> _Requirements;
		
		private EntitySet<Task> _Task;
		
		private EntitySet<Workload> _Workload;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcceptedHoursChanging(System.Nullable<double> value);
    partial void OnAcceptedHoursChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnAssignedToChanging(string value);
    partial void OnAssignedToChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnBaselineEndChanging(System.Nullable<System.DateTime> value);
    partial void OnBaselineEndChanged();
    partial void OnBaselineStartChanging(System.Nullable<System.DateTime> value);
    partial void OnBaselineStartChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEstimatedHoursChanging(System.Nullable<double> value);
    partial void OnEstimatedHoursChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMilestoneHoursChanging(System.Nullable<double> value);
    partial void OnMilestoneHoursChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnPONumberChanging(string value);
    partial void OnPONumberChanged();
    partial void OnProject2ContractTitleChanging(System.Nullable<int> value);
    partial void OnProject2ContractTitleChanged();
    partial void OnProject2PartnersTitleChanging(System.Nullable<int> value);
    partial void OnProject2PartnersTitleChanged();
    partial void OnProject2StageTitleChanging(System.Nullable<int> value);
    partial void OnProject2StageTitleChanged();
    partial void OnProjectBudgetChanging(System.Nullable<double> value);
    partial void OnProjectBudgetChanged();
    partial void OnProjectEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProjectEndDateChanged();
    partial void OnProjectHoursChanging(System.Nullable<double> value);
    partial void OnProjectHoursChanged();
    partial void OnProjectNumberChanging(string value);
    partial void OnProjectNumberChanged();
    partial void OnProjectStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProjectStartDateChanged();
    partial void OnProjectTypeChanging(string value);
    partial void OnProjectTypeChanged();
    partial void OnProjectWarrantyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProjectWarrantyDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Projects()
		{
			this._Category = new EntitySet<Category>(new Action<Category>(this.attach_Category), new Action<Category>(this.detach_Category));
			this._Estimation = new EntitySet<Estimation>(new Action<Estimation>(this.attach_Estimation), new Action<Estimation>(this.detach_Estimation));
			this._Milestone = new EntitySet<Milestone>(new Action<Milestone>(this.attach_Milestone), new Action<Milestone>(this.detach_Milestone));
			this._Contracts = default(EntityRef<Contracts>);
			this._Partners = default(EntityRef<Partners>);
			this._Stage = default(EntityRef<Stage>);
			this._Requirements = new EntitySet<Requirements>(new Action<Requirements>(this.attach_Requirements), new Action<Requirements>(this.detach_Requirements));
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			this._Workload = new EntitySet<Workload>(new Action<Workload>(this.attach_Workload), new Action<Workload>(this.detach_Workload));
			OnCreated();
		}
		
		[Column(Storage="_AcceptedHours", DbType="Float")]
		public System.Nullable<double> AcceptedHours
		{
			get
			{
				return this._AcceptedHours;
			}
			set
			{
				if ((this._AcceptedHours != value))
				{
					this.OnAcceptedHoursChanging(value);
					this.SendPropertyChanging();
					this._AcceptedHours = value;
					this.SendPropertyChanged("AcceptedHours");
					this.OnAcceptedHoursChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedTo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_BaselineEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> BaselineEnd
		{
			get
			{
				return this._BaselineEnd;
			}
			set
			{
				if ((this._BaselineEnd != value))
				{
					this.OnBaselineEndChanging(value);
					this.SendPropertyChanging();
					this._BaselineEnd = value;
					this.SendPropertyChanged("BaselineEnd");
					this.OnBaselineEndChanged();
				}
			}
		}
		
		[Column(Storage="_BaselineStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> BaselineStart
		{
			get
			{
				return this._BaselineStart;
			}
			set
			{
				if ((this._BaselineStart != value))
				{
					this.OnBaselineStartChanging(value);
					this.SendPropertyChanging();
					this._BaselineStart = value;
					this.SendPropertyChanged("BaselineStart");
					this.OnBaselineStartChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedHours", DbType="Float")]
		public System.Nullable<double> EstimatedHours
		{
			get
			{
				return this._EstimatedHours;
			}
			set
			{
				if ((this._EstimatedHours != value))
				{
					this.OnEstimatedHoursChanging(value);
					this.SendPropertyChanging();
					this._EstimatedHours = value;
					this.SendPropertyChanged("EstimatedHours");
					this.OnEstimatedHoursChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MilestoneHours", DbType="Float")]
		public System.Nullable<double> MilestoneHours
		{
			get
			{
				return this._MilestoneHours;
			}
			set
			{
				if ((this._MilestoneHours != value))
				{
					this.OnMilestoneHoursChanging(value);
					this.SendPropertyChanging();
					this._MilestoneHours = value;
					this.SendPropertyChanged("MilestoneHours");
					this.OnMilestoneHoursChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_PONumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PONumber
		{
			get
			{
				return this._PONumber;
			}
			set
			{
				if ((this._PONumber != value))
				{
					this.OnPONumberChanging(value);
					this.SendPropertyChanging();
					this._PONumber = value;
					this.SendPropertyChanged("PONumber");
					this.OnPONumberChanged();
				}
			}
		}
		
		[Column(Storage="_Project2ContractTitle", DbType="Int")]
		public System.Nullable<int> Project2ContractTitle
		{
			get
			{
				return this._Project2ContractTitle;
			}
			set
			{
				if ((this._Project2ContractTitle != value))
				{
					if (this._Contracts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject2ContractTitleChanging(value);
					this.SendPropertyChanging();
					this._Project2ContractTitle = value;
					this.SendPropertyChanged("Project2ContractTitle");
					this.OnProject2ContractTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Project2PartnersTitle", DbType="Int")]
		public System.Nullable<int> Project2PartnersTitle
		{
			get
			{
				return this._Project2PartnersTitle;
			}
			set
			{
				if ((this._Project2PartnersTitle != value))
				{
					if (this._Partners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject2PartnersTitleChanging(value);
					this.SendPropertyChanging();
					this._Project2PartnersTitle = value;
					this.SendPropertyChanged("Project2PartnersTitle");
					this.OnProject2PartnersTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Project2StageTitle", DbType="Int")]
		public System.Nullable<int> Project2StageTitle
		{
			get
			{
				return this._Project2StageTitle;
			}
			set
			{
				if ((this._Project2StageTitle != value))
				{
					if (this._Stage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject2StageTitleChanging(value);
					this.SendPropertyChanging();
					this._Project2StageTitle = value;
					this.SendPropertyChanged("Project2StageTitle");
					this.OnProject2StageTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectBudget", DbType="Float")]
		public System.Nullable<double> ProjectBudget
		{
			get
			{
				return this._ProjectBudget;
			}
			set
			{
				if ((this._ProjectBudget != value))
				{
					this.OnProjectBudgetChanging(value);
					this.SendPropertyChanging();
					this._ProjectBudget = value;
					this.SendPropertyChanged("ProjectBudget");
					this.OnProjectBudgetChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProjectEndDate
		{
			get
			{
				return this._ProjectEndDate;
			}
			set
			{
				if ((this._ProjectEndDate != value))
				{
					this.OnProjectEndDateChanging(value);
					this.SendPropertyChanging();
					this._ProjectEndDate = value;
					this.SendPropertyChanged("ProjectEndDate");
					this.OnProjectEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectHours", DbType="Float")]
		public System.Nullable<double> ProjectHours
		{
			get
			{
				return this._ProjectHours;
			}
			set
			{
				if ((this._ProjectHours != value))
				{
					this.OnProjectHoursChanging(value);
					this.SendPropertyChanging();
					this._ProjectHours = value;
					this.SendPropertyChanged("ProjectHours");
					this.OnProjectHoursChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ProjectNumber
		{
			get
			{
				return this._ProjectNumber;
			}
			set
			{
				if ((this._ProjectNumber != value))
				{
					this.OnProjectNumberChanging(value);
					this.SendPropertyChanging();
					this._ProjectNumber = value;
					this.SendPropertyChanged("ProjectNumber");
					this.OnProjectNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProjectStartDate
		{
			get
			{
				return this._ProjectStartDate;
			}
			set
			{
				if ((this._ProjectStartDate != value))
				{
					this.OnProjectStartDateChanging(value);
					this.SendPropertyChanging();
					this._ProjectStartDate = value;
					this.SendPropertyChanged("ProjectStartDate");
					this.OnProjectStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ProjectType
		{
			get
			{
				return this._ProjectType;
			}
			set
			{
				if ((this._ProjectType != value))
				{
					this.OnProjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ProjectType = value;
					this.SendPropertyChanged("ProjectType");
					this.OnProjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectWarrantyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProjectWarrantyDate
		{
			get
			{
				return this._ProjectWarrantyDate;
			}
			set
			{
				if ((this._ProjectWarrantyDate != value))
				{
					this.OnProjectWarrantyDateChanging(value);
					this.SendPropertyChanging();
					this._ProjectWarrantyDate = value;
					this.SendPropertyChanged("ProjectWarrantyDate");
					this.OnProjectWarrantyDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Category_Projects", Storage="_Category", ThisKey="ID", OtherKey="Category2ProjectsTitle", DeleteRule="NO ACTION")]
		public EntitySet<Category> Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				this._Category.Assign(value);
			}
		}
		
		[Association(Name="FK_Estimation_Projects", Storage="_Estimation", ThisKey="ID", OtherKey="Estimation2ProjectTitle", DeleteRule="NO ACTION")]
		public EntitySet<Estimation> Estimation
		{
			get
			{
				return this._Estimation;
			}
			set
			{
				this._Estimation.Assign(value);
			}
		}
		
		[Association(Name="FK_Milestone_Projects", Storage="_Milestone", ThisKey="ID", OtherKey="Milestone2ProjectTitle", DeleteRule="NO ACTION")]
		public EntitySet<Milestone> Milestone
		{
			get
			{
				return this._Milestone;
			}
			set
			{
				this._Milestone.Assign(value);
			}
		}
		
		[Association(Name="FK_Projects_Contracts", Storage="_Contracts", ThisKey="Project2ContractTitle", OtherKey="ID", IsForeignKey=true)]
		public Contracts Contracts
		{
			get
			{
				return this._Contracts.Entity;
			}
			set
			{
				Contracts previousValue = this._Contracts.Entity;
				if (((previousValue != value) 
							|| (this._Contracts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contracts.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Contracts.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Project2ContractTitle = value.ID;
					}
					else
					{
						this._Project2ContractTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contracts");
				}
			}
		}
		
		[Association(Name="FK_Projects_Partners", Storage="_Partners", ThisKey="Project2PartnersTitle", OtherKey="ID", IsForeignKey=true)]
		public Partners Partners
		{
			get
			{
				return this._Partners.Entity;
			}
			set
			{
				Partners previousValue = this._Partners.Entity;
				if (((previousValue != value) 
							|| (this._Partners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partners.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Partners.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Project2PartnersTitle = value.ID;
					}
					else
					{
						this._Project2PartnersTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partners");
				}
			}
		}
		
		[Association(Name="FK_Projects_Stage", Storage="_Stage", ThisKey="Project2StageTitle", OtherKey="ID", IsForeignKey=true)]
		public Stage Stage
		{
			get
			{
				return this._Stage.Entity;
			}
			set
			{
				Stage previousValue = this._Stage.Entity;
				if (((previousValue != value) 
							|| (this._Stage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stage.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Stage.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Project2StageTitle = value.ID;
					}
					else
					{
						this._Project2StageTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Stage");
				}
			}
		}
		
		[Association(Name="FK_Requirements_Projects", Storage="_Requirements", ThisKey="ID", OtherKey="Requirements2ProjectsTitle", DeleteRule="NO ACTION")]
		public EntitySet<Requirements> Requirements
		{
			get
			{
				return this._Requirements;
			}
			set
			{
				this._Requirements.Assign(value);
			}
		}
		
		[Association(Name="FK_Task_Projects", Storage="_Task", ThisKey="ID", OtherKey="Task2ProjectTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		[Association(Name="FK_Workload_Projects", Storage="_Workload", ThisKey="ID", OtherKey="Workload2ProjectTitle", DeleteRule="NO ACTION")]
		public EntitySet<Workload> Workload
		{
			get
			{
				return this._Workload;
			}
			set
			{
				this._Workload.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category(Category entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Category(Category entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
		
		private void attach_Estimation(Estimation entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Estimation(Estimation entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
		
		private void attach_Milestone(Milestone entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Milestone(Milestone entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
		
		private void attach_Requirements(Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Requirements(Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
		
		private void attach_Workload(Workload entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Workload(Workload entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
	}
	
	[Table(Name="dbo.Requirements")]
	public partial class Requirements : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _Body;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private System.Nullable<double> _EstimatedHours;
		
		private System.Nullable<double> _Hours;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _RequirementPriority;
		
		private System.Nullable<int> _Requirements2MilestoneTitle;
		
		private System.Nullable<int> _Requirements2ProjectsTitle;
		
		private string _RequirementsType;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Milestone> _Milestone;
		
		private EntityRef<Projects> _Projects;
		
		private EntitySet<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEstimatedHoursChanging(System.Nullable<double> value);
    partial void OnEstimatedHoursChanged();
    partial void OnHoursChanging(System.Nullable<double> value);
    partial void OnHoursChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnRequirementPriorityChanging(System.Nullable<int> value);
    partial void OnRequirementPriorityChanged();
    partial void OnRequirements2MilestoneTitleChanging(System.Nullable<int> value);
    partial void OnRequirements2MilestoneTitleChanged();
    partial void OnRequirements2ProjectsTitleChanging(System.Nullable<int> value);
    partial void OnRequirements2ProjectsTitleChanged();
    partial void OnRequirementsTypeChanging(string value);
    partial void OnRequirementsTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Requirements()
		{
			this._Milestone = default(EntityRef<Milestone>);
			this._Projects = default(EntityRef<Projects>);
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedHours", DbType="Float")]
		public System.Nullable<double> EstimatedHours
		{
			get
			{
				return this._EstimatedHours;
			}
			set
			{
				if ((this._EstimatedHours != value))
				{
					this.OnEstimatedHoursChanging(value);
					this.SendPropertyChanging();
					this._EstimatedHours = value;
					this.SendPropertyChanged("EstimatedHours");
					this.OnEstimatedHoursChanged();
				}
			}
		}
		
		[Column(Storage="_Hours", DbType="Float")]
		public System.Nullable<double> Hours
		{
			get
			{
				return this._Hours;
			}
			set
			{
				if ((this._Hours != value))
				{
					this.OnHoursChanging(value);
					this.SendPropertyChanging();
					this._Hours = value;
					this.SendPropertyChanged("Hours");
					this.OnHoursChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementPriority", DbType="Int")]
		public System.Nullable<int> RequirementPriority
		{
			get
			{
				return this._RequirementPriority;
			}
			set
			{
				if ((this._RequirementPriority != value))
				{
					this.OnRequirementPriorityChanging(value);
					this.SendPropertyChanging();
					this._RequirementPriority = value;
					this.SendPropertyChanged("RequirementPriority");
					this.OnRequirementPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_Requirements2MilestoneTitle", DbType="Int")]
		public System.Nullable<int> Requirements2MilestoneTitle
		{
			get
			{
				return this._Requirements2MilestoneTitle;
			}
			set
			{
				if ((this._Requirements2MilestoneTitle != value))
				{
					if (this._Milestone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirements2MilestoneTitleChanging(value);
					this.SendPropertyChanging();
					this._Requirements2MilestoneTitle = value;
					this.SendPropertyChanged("Requirements2MilestoneTitle");
					this.OnRequirements2MilestoneTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Requirements2ProjectsTitle", DbType="Int")]
		public System.Nullable<int> Requirements2ProjectsTitle
		{
			get
			{
				return this._Requirements2ProjectsTitle;
			}
			set
			{
				if ((this._Requirements2ProjectsTitle != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirements2ProjectsTitleChanging(value);
					this.SendPropertyChanging();
					this._Requirements2ProjectsTitle = value;
					this.SendPropertyChanged("Requirements2ProjectsTitle");
					this.OnRequirements2ProjectsTitleChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementsType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RequirementsType
		{
			get
			{
				return this._RequirementsType;
			}
			set
			{
				if ((this._RequirementsType != value))
				{
					this.OnRequirementsTypeChanging(value);
					this.SendPropertyChanging();
					this._RequirementsType = value;
					this.SendPropertyChanged("RequirementsType");
					this.OnRequirementsTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Requirements_Milestone", Storage="_Milestone", ThisKey="Requirements2MilestoneTitle", OtherKey="ID", IsForeignKey=true)]
		public Milestone Milestone
		{
			get
			{
				return this._Milestone.Entity;
			}
			set
			{
				Milestone previousValue = this._Milestone.Entity;
				if (((previousValue != value) 
							|| (this._Milestone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Milestone.Entity = null;
						previousValue.Requirements.Remove(this);
					}
					this._Milestone.Entity = value;
					if ((value != null))
					{
						value.Requirements.Add(this);
						this._Requirements2MilestoneTitle = value.ID;
					}
					else
					{
						this._Requirements2MilestoneTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Milestone");
				}
			}
		}
		
		[Association(Name="FK_Requirements_Projects", Storage="_Projects", ThisKey="Requirements2ProjectsTitle", OtherKey="ID", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Requirements.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Requirements.Add(this);
						this._Requirements2ProjectsTitle = value.ID;
					}
					else
					{
						this._Requirements2ProjectsTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		[Association(Name="FK_Task_Requirements", Storage="_Task", ThisKey="ID", OtherKey="Task2RequirementsTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Requirements = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Requirements = null;
		}
	}
	
	[Table(Name="dbo.Resolution")]
	public partial class Resolution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Resolution()
		{
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Task_Resolution", Storage="_Task", ThisKey="ID", OtherKey="Task2SResolutionTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Resolution = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Resolution = null;
		}
	}
	
	[Table(Name="dbo.SPStatus")]
	public partial class SPStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Active;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public SPStatus()
		{
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			OnCreated();
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Task_SPStatus", Storage="_Task", ThisKey="ID", OtherKey="Task2StatusTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.SPStatus = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.SPStatus = null;
		}
	}
	
	[Table(Name="dbo.Stage")]
	public partial class Stage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Milestone> _Milestone;
		
		private EntitySet<Projects> _Projects;
		
		private EntitySet<Workload> _Workload;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Stage()
		{
			this._Milestone = new EntitySet<Milestone>(new Action<Milestone>(this.attach_Milestone), new Action<Milestone>(this.detach_Milestone));
			this._Projects = new EntitySet<Projects>(new Action<Projects>(this.attach_Projects), new Action<Projects>(this.detach_Projects));
			this._Workload = new EntitySet<Workload>(new Action<Workload>(this.attach_Workload), new Action<Workload>(this.detach_Workload));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Milestone_Stage", Storage="_Milestone", ThisKey="ID", OtherKey="Milestone2StageTitle", DeleteRule="NO ACTION")]
		public EntitySet<Milestone> Milestone
		{
			get
			{
				return this._Milestone;
			}
			set
			{
				this._Milestone.Assign(value);
			}
		}
		
		[Association(Name="FK_Projects_Stage", Storage="_Projects", ThisKey="ID", OtherKey="Project2StageTitle", DeleteRule="NO ACTION")]
		public EntitySet<Projects> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[Association(Name="FK_Workload_Stage", Storage="_Workload", ThisKey="ID", OtherKey="Workload2StageTitle", DeleteRule="NO ACTION")]
		public EntitySet<Workload> Workload
		{
			get
			{
				return this._Workload;
			}
			set
			{
				this._Workload.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Milestone(Milestone entity)
		{
			this.SendPropertyChanging();
			entity.Stage = this;
		}
		
		private void detach_Milestone(Milestone entity)
		{
			this.SendPropertyChanging();
			entity.Stage = null;
		}
		
		private void attach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Stage = this;
		}
		
		private void detach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Stage = null;
		}
		
		private void attach_Workload(Workload entity)
		{
			this.SendPropertyChanging();
			entity.Stage = this;
		}
		
		private void detach_Workload(Workload entity)
		{
			this.SendPropertyChanging();
			entity.Stage = null;
		}
	}
	
	[Table(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Active;
		
		private string _AssignedTo;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _BaselineEnd;
		
		private System.Nullable<System.DateTime> _BaselineStart;
		
		private string _Body;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private System.Nullable<double> _Hours;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _Task2CategoryTitle;
		
		private System.Nullable<int> _Task2MilestoneDefinedInTitle;
		
		private System.Nullable<int> _Task2MilestoneResolvedInTitle;
		
		private System.Nullable<int> _Task2ProjectTitle;
		
		private System.Nullable<int> _Task2RequirementsTitle;
		
		private System.Nullable<int> _Task2SPriorityTitle;
		
		private System.Nullable<int> _Task2SResolutionTitle;
		
		private System.Nullable<int> _Task2StatusTitle;
		
		private System.Nullable<int> _Task2TypeTitle;
		
		private System.Nullable<System.DateTime> _TaskDueDate;
		
		private System.Nullable<System.DateTime> _TaskEnd;
		
		private System.Nullable<System.DateTime> _TaskStart;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Milestone> _Milestone;
		
		private EntityRef<Milestone> _Task2MilestoneResolvedInTitleMilestone;
		
		private EntityRef<Priority> _Priority;
		
		private EntityRef<Projects> _Projects;
		
		private EntityRef<Requirements> _Requirements;
		
		private EntityRef<Resolution> _Resolution;
		
		private EntityRef<SPStatus> _SPStatus;
		
		private EntityRef<Type> _Type;
		
		private EntitySet<Workload> _Workload;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnAssignedToChanging(string value);
    partial void OnAssignedToChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnBaselineEndChanging(System.Nullable<System.DateTime> value);
    partial void OnBaselineEndChanged();
    partial void OnBaselineStartChanging(System.Nullable<System.DateTime> value);
    partial void OnBaselineStartChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnHoursChanging(System.Nullable<double> value);
    partial void OnHoursChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTask2CategoryTitleChanging(System.Nullable<int> value);
    partial void OnTask2CategoryTitleChanged();
    partial void OnTask2MilestoneDefinedInTitleChanging(System.Nullable<int> value);
    partial void OnTask2MilestoneDefinedInTitleChanged();
    partial void OnTask2MilestoneResolvedInTitleChanging(System.Nullable<int> value);
    partial void OnTask2MilestoneResolvedInTitleChanged();
    partial void OnTask2ProjectTitleChanging(System.Nullable<int> value);
    partial void OnTask2ProjectTitleChanged();
    partial void OnTask2RequirementsTitleChanging(System.Nullable<int> value);
    partial void OnTask2RequirementsTitleChanged();
    partial void OnTask2SPriorityTitleChanging(System.Nullable<int> value);
    partial void OnTask2SPriorityTitleChanged();
    partial void OnTask2SResolutionTitleChanging(System.Nullable<int> value);
    partial void OnTask2SResolutionTitleChanged();
    partial void OnTask2StatusTitleChanging(System.Nullable<int> value);
    partial void OnTask2StatusTitleChanged();
    partial void OnTask2TypeTitleChanging(System.Nullable<int> value);
    partial void OnTask2TypeTitleChanged();
    partial void OnTaskDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTaskDueDateChanged();
    partial void OnTaskEndChanging(System.Nullable<System.DateTime> value);
    partial void OnTaskEndChanged();
    partial void OnTaskStartChanging(System.Nullable<System.DateTime> value);
    partial void OnTaskStartChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Task()
		{
			this._Category = default(EntityRef<Category>);
			this._Milestone = default(EntityRef<Milestone>);
			this._Task2MilestoneResolvedInTitleMilestone = default(EntityRef<Milestone>);
			this._Priority = default(EntityRef<Priority>);
			this._Projects = default(EntityRef<Projects>);
			this._Requirements = default(EntityRef<Requirements>);
			this._Resolution = default(EntityRef<Resolution>);
			this._SPStatus = default(EntityRef<SPStatus>);
			this._Type = default(EntityRef<Type>);
			this._Workload = new EntitySet<Workload>(new Action<Workload>(this.attach_Workload), new Action<Workload>(this.detach_Workload));
			OnCreated();
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedTo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_BaselineEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> BaselineEnd
		{
			get
			{
				return this._BaselineEnd;
			}
			set
			{
				if ((this._BaselineEnd != value))
				{
					this.OnBaselineEndChanging(value);
					this.SendPropertyChanging();
					this._BaselineEnd = value;
					this.SendPropertyChanged("BaselineEnd");
					this.OnBaselineEndChanged();
				}
			}
		}
		
		[Column(Storage="_BaselineStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> BaselineStart
		{
			get
			{
				return this._BaselineStart;
			}
			set
			{
				if ((this._BaselineStart != value))
				{
					this.OnBaselineStartChanging(value);
					this.SendPropertyChanging();
					this._BaselineStart = value;
					this.SendPropertyChanged("BaselineStart");
					this.OnBaselineStartChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_Hours", DbType="Float")]
		public System.Nullable<double> Hours
		{
			get
			{
				return this._Hours;
			}
			set
			{
				if ((this._Hours != value))
				{
					this.OnHoursChanging(value);
					this.SendPropertyChanging();
					this._Hours = value;
					this.SendPropertyChanged("Hours");
					this.OnHoursChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Task2CategoryTitle", DbType="Int")]
		public System.Nullable<int> Task2CategoryTitle
		{
			get
			{
				return this._Task2CategoryTitle;
			}
			set
			{
				if ((this._Task2CategoryTitle != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2CategoryTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2CategoryTitle = value;
					this.SendPropertyChanged("Task2CategoryTitle");
					this.OnTask2CategoryTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2MilestoneDefinedInTitle", DbType="Int")]
		public System.Nullable<int> Task2MilestoneDefinedInTitle
		{
			get
			{
				return this._Task2MilestoneDefinedInTitle;
			}
			set
			{
				if ((this._Task2MilestoneDefinedInTitle != value))
				{
					if (this._Milestone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2MilestoneDefinedInTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2MilestoneDefinedInTitle = value;
					this.SendPropertyChanged("Task2MilestoneDefinedInTitle");
					this.OnTask2MilestoneDefinedInTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2MilestoneResolvedInTitle", DbType="Int")]
		public System.Nullable<int> Task2MilestoneResolvedInTitle
		{
			get
			{
				return this._Task2MilestoneResolvedInTitle;
			}
			set
			{
				if ((this._Task2MilestoneResolvedInTitle != value))
				{
					if (this._Task2MilestoneResolvedInTitleMilestone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2MilestoneResolvedInTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2MilestoneResolvedInTitle = value;
					this.SendPropertyChanged("Task2MilestoneResolvedInTitle");
					this.OnTask2MilestoneResolvedInTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2ProjectTitle", DbType="Int")]
		public System.Nullable<int> Task2ProjectTitle
		{
			get
			{
				return this._Task2ProjectTitle;
			}
			set
			{
				if ((this._Task2ProjectTitle != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2ProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2ProjectTitle = value;
					this.SendPropertyChanged("Task2ProjectTitle");
					this.OnTask2ProjectTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2RequirementsTitle", DbType="Int")]
		public System.Nullable<int> Task2RequirementsTitle
		{
			get
			{
				return this._Task2RequirementsTitle;
			}
			set
			{
				if ((this._Task2RequirementsTitle != value))
				{
					if (this._Requirements.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2RequirementsTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2RequirementsTitle = value;
					this.SendPropertyChanged("Task2RequirementsTitle");
					this.OnTask2RequirementsTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2SPriorityTitle", DbType="Int")]
		public System.Nullable<int> Task2SPriorityTitle
		{
			get
			{
				return this._Task2SPriorityTitle;
			}
			set
			{
				if ((this._Task2SPriorityTitle != value))
				{
					if (this._Priority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2SPriorityTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2SPriorityTitle = value;
					this.SendPropertyChanged("Task2SPriorityTitle");
					this.OnTask2SPriorityTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2SResolutionTitle", DbType="Int")]
		public System.Nullable<int> Task2SResolutionTitle
		{
			get
			{
				return this._Task2SResolutionTitle;
			}
			set
			{
				if ((this._Task2SResolutionTitle != value))
				{
					if (this._Resolution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2SResolutionTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2SResolutionTitle = value;
					this.SendPropertyChanged("Task2SResolutionTitle");
					this.OnTask2SResolutionTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2StatusTitle", DbType="Int")]
		public System.Nullable<int> Task2StatusTitle
		{
			get
			{
				return this._Task2StatusTitle;
			}
			set
			{
				if ((this._Task2StatusTitle != value))
				{
					if (this._SPStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2StatusTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2StatusTitle = value;
					this.SendPropertyChanged("Task2StatusTitle");
					this.OnTask2StatusTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Task2TypeTitle", DbType="Int")]
		public System.Nullable<int> Task2TypeTitle
		{
			get
			{
				return this._Task2TypeTitle;
			}
			set
			{
				if ((this._Task2TypeTitle != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask2TypeTitleChanging(value);
					this.SendPropertyChanging();
					this._Task2TypeTitle = value;
					this.SendPropertyChanged("Task2TypeTitle");
					this.OnTask2TypeTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TaskDueDate
		{
			get
			{
				return this._TaskDueDate;
			}
			set
			{
				if ((this._TaskDueDate != value))
				{
					this.OnTaskDueDateChanging(value);
					this.SendPropertyChanging();
					this._TaskDueDate = value;
					this.SendPropertyChanged("TaskDueDate");
					this.OnTaskDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> TaskEnd
		{
			get
			{
				return this._TaskEnd;
			}
			set
			{
				if ((this._TaskEnd != value))
				{
					this.OnTaskEndChanging(value);
					this.SendPropertyChanging();
					this._TaskEnd = value;
					this.SendPropertyChanged("TaskEnd");
					this.OnTaskEndChanged();
				}
			}
		}
		
		[Column(Storage="_TaskStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> TaskStart
		{
			get
			{
				return this._TaskStart;
			}
			set
			{
				if ((this._TaskStart != value))
				{
					this.OnTaskStartChanging(value);
					this.SendPropertyChanging();
					this._TaskStart = value;
					this.SendPropertyChanged("TaskStart");
					this.OnTaskStartChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Task_Category", Storage="_Category", ThisKey="Task2CategoryTitle", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2CategoryTitle = value.ID;
					}
					else
					{
						this._Task2CategoryTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="FK_Task_MilestoneDefined", Storage="_Milestone", ThisKey="Task2MilestoneDefinedInTitle", OtherKey="ID", IsForeignKey=true)]
		public Milestone Milestone
		{
			get
			{
				return this._Milestone.Entity;
			}
			set
			{
				Milestone previousValue = this._Milestone.Entity;
				if (((previousValue != value) 
							|| (this._Milestone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Milestone.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Milestone.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2MilestoneDefinedInTitle = value.ID;
					}
					else
					{
						this._Task2MilestoneDefinedInTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Milestone");
				}
			}
		}
		
		[Association(Name="FK_Task_MilestoneResolved", Storage="_Task2MilestoneResolvedInTitleMilestone", ThisKey="Task2MilestoneResolvedInTitle", OtherKey="ID", IsForeignKey=true)]
		public Milestone Task2MilestoneResolvedInTitleMilestone
		{
			get
			{
				return this._Task2MilestoneResolvedInTitleMilestone.Entity;
			}
			set
			{
				Milestone previousValue = this._Task2MilestoneResolvedInTitleMilestone.Entity;
				if (((previousValue != value) 
							|| (this._Task2MilestoneResolvedInTitleMilestone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task2MilestoneResolvedInTitleMilestone.Entity = null;
						previousValue.Task_MilestoneResolved.Remove(this);
					}
					this._Task2MilestoneResolvedInTitleMilestone.Entity = value;
					if ((value != null))
					{
						value.Task_MilestoneResolved.Add(this);
						this._Task2MilestoneResolvedInTitle = value.ID;
					}
					else
					{
						this._Task2MilestoneResolvedInTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Task2MilestoneResolvedInTitleMilestone");
				}
			}
		}
		
		[Association(Name="FK_Task_Priority", Storage="_Priority", ThisKey="Task2SPriorityTitle", OtherKey="ID", IsForeignKey=true)]
		public Priority Priority
		{
			get
			{
				return this._Priority.Entity;
			}
			set
			{
				Priority previousValue = this._Priority.Entity;
				if (((previousValue != value) 
							|| (this._Priority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Priority.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Priority.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2SPriorityTitle = value.ID;
					}
					else
					{
						this._Task2SPriorityTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Priority");
				}
			}
		}
		
		[Association(Name="FK_Task_Projects", Storage="_Projects", ThisKey="Task2ProjectTitle", OtherKey="ID", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2ProjectTitle = value.ID;
					}
					else
					{
						this._Task2ProjectTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		[Association(Name="FK_Task_Requirements", Storage="_Requirements", ThisKey="Task2RequirementsTitle", OtherKey="ID", IsForeignKey=true)]
		public Requirements Requirements
		{
			get
			{
				return this._Requirements.Entity;
			}
			set
			{
				Requirements previousValue = this._Requirements.Entity;
				if (((previousValue != value) 
							|| (this._Requirements.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirements.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Requirements.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2RequirementsTitle = value.ID;
					}
					else
					{
						this._Task2RequirementsTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Requirements");
				}
			}
		}
		
		[Association(Name="FK_Task_Resolution", Storage="_Resolution", ThisKey="Task2SResolutionTitle", OtherKey="ID", IsForeignKey=true)]
		public Resolution Resolution
		{
			get
			{
				return this._Resolution.Entity;
			}
			set
			{
				Resolution previousValue = this._Resolution.Entity;
				if (((previousValue != value) 
							|| (this._Resolution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resolution.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Resolution.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2SResolutionTitle = value.ID;
					}
					else
					{
						this._Task2SResolutionTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resolution");
				}
			}
		}
		
		[Association(Name="FK_Task_SPStatus", Storage="_SPStatus", ThisKey="Task2StatusTitle", OtherKey="ID", IsForeignKey=true)]
		public SPStatus SPStatus
		{
			get
			{
				return this._SPStatus.Entity;
			}
			set
			{
				SPStatus previousValue = this._SPStatus.Entity;
				if (((previousValue != value) 
							|| (this._SPStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPStatus.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._SPStatus.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2StatusTitle = value.ID;
					}
					else
					{
						this._Task2StatusTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("SPStatus");
				}
			}
		}
		
		[Association(Name="FK_Task_Type", Storage="_Type", ThisKey="Task2TypeTitle", OtherKey="ID", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._Task2TypeTitle = value.ID;
					}
					else
					{
						this._Task2TypeTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[Association(Name="FK_Workload_Task", Storage="_Workload", ThisKey="ID", OtherKey="Workload2TaskID", DeleteRule="NO ACTION")]
		public EntitySet<Workload> Workload
		{
			get
			{
				return this._Workload;
			}
			set
			{
				this._Workload.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workload(Workload entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Workload(Workload entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[Table(Name="dbo.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Type()
		{
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Task_Type", Storage="_Task", ThisKey="ID", OtherKey="Task2TypeTitle", DeleteRule="NO ACTION")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[Table(Name="dbo.Workload")]
	public partial class Workload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AssignedTo;
		
		private string _Author;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<bool> _ReadOnly;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private string _Title;
		
		private System.Nullable<int> _Workload2ProjectTitle;
		
		private System.Nullable<int> _Workload2StageTitle;
		
		private System.Nullable<int> _Workload2TaskID;
		
		private System.Nullable<double> _WorkloadHours;
		
		private bool _OnlySQL;
		
		private EntityRef<Projects> _Projects;
		
		private EntityRef<Stage> _Stage;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignedToChanging(string value);
    partial void OnAssignedToChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnReadOnlyChanging(System.Nullable<bool> value);
    partial void OnReadOnlyChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWorkload2ProjectTitleChanging(System.Nullable<int> value);
    partial void OnWorkload2ProjectTitleChanged();
    partial void OnWorkload2StageTitleChanging(System.Nullable<int> value);
    partial void OnWorkload2StageTitleChanged();
    partial void OnWorkload2TaskIDChanging(System.Nullable<int> value);
    partial void OnWorkload2TaskIDChanged();
    partial void OnWorkloadHoursChanging(System.Nullable<double> value);
    partial void OnWorkloadHoursChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Workload()
		{
			this._Projects = default(EntityRef<Projects>);
			this._Stage = default(EntityRef<Stage>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[Column(Storage="_AssignedTo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ReadOnly", DbType="Bit")]
		public System.Nullable<bool> ReadOnly
		{
			get
			{
				return this._ReadOnly;
			}
			set
			{
				if ((this._ReadOnly != value))
				{
					this.OnReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._ReadOnly = value;
					this.SendPropertyChanged("ReadOnly");
					this.OnReadOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Workload2ProjectTitle", DbType="Int")]
		public System.Nullable<int> Workload2ProjectTitle
		{
			get
			{
				return this._Workload2ProjectTitle;
			}
			set
			{
				if ((this._Workload2ProjectTitle != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkload2ProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._Workload2ProjectTitle = value;
					this.SendPropertyChanged("Workload2ProjectTitle");
					this.OnWorkload2ProjectTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Workload2StageTitle", DbType="Int")]
		public System.Nullable<int> Workload2StageTitle
		{
			get
			{
				return this._Workload2StageTitle;
			}
			set
			{
				if ((this._Workload2StageTitle != value))
				{
					if (this._Stage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkload2StageTitleChanging(value);
					this.SendPropertyChanging();
					this._Workload2StageTitle = value;
					this.SendPropertyChanged("Workload2StageTitle");
					this.OnWorkload2StageTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Workload2TaskID", DbType="Int")]
		public System.Nullable<int> Workload2TaskID
		{
			get
			{
				return this._Workload2TaskID;
			}
			set
			{
				if ((this._Workload2TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkload2TaskIDChanging(value);
					this.SendPropertyChanging();
					this._Workload2TaskID = value;
					this.SendPropertyChanged("Workload2TaskID");
					this.OnWorkload2TaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkloadHours", DbType="Float")]
		public System.Nullable<double> WorkloadHours
		{
			get
			{
				return this._WorkloadHours;
			}
			set
			{
				if ((this._WorkloadHours != value))
				{
					this.OnWorkloadHoursChanging(value);
					this.SendPropertyChanging();
					this._WorkloadHours = value;
					this.SendPropertyChanged("WorkloadHours");
					this.OnWorkloadHoursChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Workload_Projects", Storage="_Projects", ThisKey="Workload2ProjectTitle", OtherKey="ID", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Workload.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Workload.Add(this);
						this._Workload2ProjectTitle = value.ID;
					}
					else
					{
						this._Workload2ProjectTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		[Association(Name="FK_Workload_Stage", Storage="_Stage", ThisKey="Workload2StageTitle", OtherKey="ID", IsForeignKey=true)]
		public Stage Stage
		{
			get
			{
				return this._Stage.Entity;
			}
			set
			{
				Stage previousValue = this._Stage.Entity;
				if (((previousValue != value) 
							|| (this._Stage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stage.Entity = null;
						previousValue.Workload.Remove(this);
					}
					this._Stage.Entity = value;
					if ((value != null))
					{
						value.Workload.Add(this);
						this._Workload2StageTitle = value.ID;
					}
					else
					{
						this._Workload2StageTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Stage");
				}
			}
		}
		
		[Association(Name="FK_Workload_Task", Storage="_Task", ThisKey="Workload2TaskID", OtherKey="ID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Workload.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Workload.Add(this);
						this._Workload2TaskID = value.ID;
					}
					else
					{
						this._Workload2TaskID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
