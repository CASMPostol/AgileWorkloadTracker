//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:2.0.50727.5466
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591
namespace CAS.AgileWorkloadTracker.DataModel.Linq {
	using System;
	
	
	public partial class Entities : Microsoft.SharePoint.Linq.DataContext {
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		#endregion
		
		public Entities(string requestUrl) : 
				base(requestUrl) {
			this.OnCreated();
		}
		
		/// <summary>
		/// Category List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Category")]
		public Microsoft.SharePoint.Linq.EntityList<Category> Category {
			get {
				return this.GetList<Category>("Category");
			}
		}
		
		/// <summary>
		/// Contracts List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Contracts")]
		public Microsoft.SharePoint.Linq.EntityList<Contracts> Contracts {
			get {
				return this.GetList<Contracts>("Contracts");
			}
		}
		
		/// <summary>
		/// Estimation List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Estimation")]
		public Microsoft.SharePoint.Linq.EntityList<Estimation> Estimation {
			get {
				return this.GetList<Estimation>("Estimation");
			}
		}
		
		/// <summary>
		/// Use the master page gallery to store master pages. The master pages in this gallery are available to this site and any sites underneath it.
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Master Page Gallery")]
		public Microsoft.SharePoint.Linq.EntityList<MasterPageGalleryStronaWzorcowa> MasterPageGallery {
			get {
				return this.GetList<MasterPageGalleryStronaWzorcowa>("Master Page Gallery");
			}
		}
		
		/// <summary>
		/// Milestone List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Milestone")]
		public Microsoft.SharePoint.Linq.EntityList<Milestone> Milestone {
			get {
				return this.GetList<Milestone>("Milestone");
			}
		}
		
		/// <summary>
		/// Partners List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Partners")]
		public Microsoft.SharePoint.Linq.EntityList<Partners> Partners {
			get {
				return this.GetList<Partners>("Partners");
			}
		}
		
		/// <summary>
		/// Priority List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Priority")]
		public Microsoft.SharePoint.Linq.EntityList<Priority> Priority {
			get {
				return this.GetList<Priority>("Priority");
			}
		}
		
		/// <summary>
		/// Project List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Projects")]
		public Microsoft.SharePoint.Linq.EntityList<Projects> Projects {
			get {
				return this.GetList<Projects>("Projects");
			}
		}
		
		/// <summary>
		/// Requirements List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Requirements")]
		public Microsoft.SharePoint.Linq.EntityList<Requirements> Requirements {
			get {
				return this.GetList<Requirements>("Requirements");
			}
		}
		
		/// <summary>
		/// Resolution List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Resolution")]
		public Microsoft.SharePoint.Linq.EntityList<Resolution> Resolution {
			get {
				return this.GetList<Resolution>("Resolution");
			}
		}
		
		/// <summary>
		/// Resources List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Resources")]
		public Microsoft.SharePoint.Linq.EntityList<Resources> Resources {
			get {
				return this.GetList<Resources>("Resources");
			}
		}
		
		/// <summary>
		/// Stage List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Stage")]
		public Microsoft.SharePoint.Linq.EntityList<Stage> Stage {
			get {
				return this.GetList<Stage>("Stage");
			}
		}
		
		/// <summary>
		/// Status List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Status")]
		public Microsoft.SharePoint.Linq.EntityList<Status> Status {
			get {
				return this.GetList<Status>("Status");
			}
		}
		
		/// <summary>
		/// Use the style library to store style sheets, such as CSS or XSL files. The style sheets in this gallery can be used by this site or any of its subsites.
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Style Library")]
		public Microsoft.SharePoint.Linq.EntityList<Dokument> StyleLibrary {
			get {
				return this.GetList<Dokument>("Style Library");
			}
		}
		
		/// <summary>
		/// Task List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Task")]
		public Microsoft.SharePoint.Linq.EntityList<Tasks> Task {
			get {
				return this.GetList<Tasks>("Task");
			}
		}
		
		/// <summary>
		/// Task Comments List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Task comments")]
		public Microsoft.SharePoint.Linq.EntityList<TaskComments> TaskComments {
			get {
				return this.GetList<TaskComments>("Task comments");
			}
		}
		
		/// <summary>
		/// Type List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Type")]
		public Microsoft.SharePoint.Linq.EntityList<Type> Type {
			get {
				return this.GetList<Type>("Type");
			}
		}
		
		/// <summary>
		/// Workload List Instance
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Workload")]
		public Microsoft.SharePoint.Linq.EntityList<Workload> Workload {
			get {
				return this.GetList<Workload>("Workload");
			}
		}
	}
	
	/// <summary>
	/// Utwórz nowy element listy.
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Element", Id="0x01")]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Category))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Contracts))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Estimation))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Dokument))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Milestone))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Partners))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Priority))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Projects))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Requirements))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Resolution))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Resources))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Stage))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Status))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Tasks))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(TaskComments))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Type))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Workload))]
	public partial class Element : Microsoft.SharePoint.Linq.ITrackEntityState, Microsoft.SharePoint.Linq.ITrackOriginalValues, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging {
		
		private System.Nullable<int> _identyfikator;
		
		private System.Nullable<int> _wersja;
		
		private string _ścieżka;
		
		private Microsoft.SharePoint.Linq.EntityState _entityState;
		
		private System.Collections.Generic.IDictionary<string, object> _originalValues;
		
		private string _title;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion

		Microsoft.SharePoint.Linq.EntityState Microsoft.SharePoint.Linq.ITrackEntityState.EntityState {
			get {
				return this._entityState;
			}
			set {
				if ((value != this._entityState)) {
					this._entityState = value;
				}
			}
		}

		System.Collections.Generic.IDictionary<string, object> Microsoft.SharePoint.Linq.ITrackOriginalValues.OriginalValues {
			get {
				if ((null == this._originalValues)) {
					this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
				}
				return this._originalValues;
			}
		}
		
		public Element() {
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ID", Storage="_identyfikator", ReadOnly=true, FieldType="Counter")]
		public System.Nullable<int> Identyfikator {
			get {
				return this._identyfikator;
			}
			set {
				if ((value != this._identyfikator)) {
					this.OnPropertyChanging("Identyfikator", this._identyfikator);
					this._identyfikator = value;
					this.OnPropertyChanged("Identyfikator");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="owshiddenversion", Storage="_wersja", ReadOnly=true, FieldType="Integer")]
		public System.Nullable<int> Wersja {
			get {
				return this._wersja;
			}
			set {
				if ((value != this._wersja)) {
					this.OnPropertyChanging("Wersja", this._wersja);
					this._wersja = value;
					this.OnPropertyChanged("Wersja");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileDirRef", Storage="_ścieżka", ReadOnly=true, FieldType="Lookup", IsLookupValue=true)]
		public string Ścieżka {
			get {
				return this._ścieżka;
			}
			set {
				if ((value != this._ścieżka)) {
					this.OnPropertyChanging("Ścieżka", this._ścieżka);
					this._ścieżka = value;
					this.OnPropertyChanged("Ścieżka");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Title", Storage="_title", Required=true, FieldType="Text")]
		public virtual string Title {
			get {
				return this._title;
			}
			set {
				if ((value != this._title)) {
					this.OnPropertyChanging("Title", this._title);
					this._title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanged(string propertyName) {
			if ((null != this.PropertyChanged)) {
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		protected virtual void OnPropertyChanging(string propertyName, object value) {
			if ((null == this._originalValues)) {
				this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
			}
			if ((false == this._originalValues.ContainsKey(propertyName))) {
				this._originalValues.Add(propertyName, value);
			}
			if ((null != this.PropertyChanging)) {
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
	}
	
	/// <summary>
	/// Utwórz nowy dokument.
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Dokument", Id="0x0101")]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(StronaWzorcowa))]
	public partial class Dokument : Element {
		
		private string _nazwa;
		
		private string _dokumentZmodyfikowanyPrzez;
		
		private string _dokumentUtworzonyPrzez;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Dokument() {
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileLeafRef", Storage="_nazwa", Required=true, FieldType="File")]
		public string Nazwa {
			get {
				return this._nazwa;
			}
			set {
				if ((value != this._nazwa)) {
					this.OnPropertyChanging("Nazwa", this._nazwa);
					this._nazwa = value;
					this.OnPropertyChanged("Nazwa");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Modified_x0020_By", Storage="_dokumentZmodyfikowanyPrzez", ReadOnly=true, FieldType="Text")]
		public string DokumentZmodyfikowanyPrzez {
			get {
				return this._dokumentZmodyfikowanyPrzez;
			}
			set {
				if ((value != this._dokumentZmodyfikowanyPrzez)) {
					this.OnPropertyChanging("DokumentZmodyfikowanyPrzez", this._dokumentZmodyfikowanyPrzez);
					this._dokumentZmodyfikowanyPrzez = value;
					this.OnPropertyChanged("DokumentZmodyfikowanyPrzez");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Created_x0020_By", Storage="_dokumentUtworzonyPrzez", ReadOnly=true, FieldType="Text")]
		public string DokumentUtworzonyPrzez {
			get {
				return this._dokumentUtworzonyPrzez;
			}
			set {
				if ((value != this._dokumentUtworzonyPrzez)) {
					this.OnPropertyChanging("DokumentUtworzonyPrzez", this._dokumentUtworzonyPrzez);
					this._dokumentUtworzonyPrzez = value;
					this.OnPropertyChanged("DokumentUtworzonyPrzez");
				}
			}
		}
	}
	
	/// <summary>
	/// Utwórz nową stronę wzorcową.
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Strona wzorcowa", Id="0x010105")]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(MasterPageGalleryStronaWzorcowa))]
	public partial class StronaWzorcowa : Dokument {
		
		protected string _description;
		
		private System.Nullable<UIVersion> _uIVersion;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public StronaWzorcowa() {
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Comments", Storage="_description", FieldType="Note")]
		public virtual string Description {
			get {
				return this._description;
			}
			set {
				if ((value != this._description)) {
					this.OnPropertyChanging("Description", this._description);
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="UIVersion", Storage="_uIVersion", FieldType="MultiChoice")]
		public System.Nullable<UIVersion> UIVersion {
			get {
				return this._uIVersion;
			}
			set {
				if ((value != this._uIVersion)) {
					this.OnPropertyChanging("UIVersion", this._uIVersion);
					this._uIVersion = value;
					this.OnPropertyChanged("UIVersion");
				}
			}
		}
	}
	
	/// <summary>
	/// Category Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Category", Id="0x01001C15F2EAC7924A828FD6A599CABD5746")]
	public partial class Category : Element {
		
		private Microsoft.SharePoint.Linq.EntityRef<Projects> _category2ProjectsTitle;
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Category() {
			this._category2ProjectsTitle = new Microsoft.SharePoint.Linq.EntityRef<Projects>();
			this._category2ProjectsTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnCategory2ProjectsTitleSync);
			this._category2ProjectsTitle.OnChanged += new System.EventHandler(this.OnCategory2ProjectsTitleChanged);
			this._category2ProjectsTitle.OnChanging += new System.EventHandler(this.OnCategory2ProjectsTitleChanging);
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Category2ProjectsTitle", Storage="_category2ProjectsTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
		public Projects Category2ProjectsTitle {
			get {
				return this._category2ProjectsTitle.GetEntity();
			}
			set {
				this._category2ProjectsTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2CategoryTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		private void OnCategory2ProjectsTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Category2ProjectsTitle", this._category2ProjectsTitle.Clone());
		}
		
		private void OnCategory2ProjectsTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Category2ProjectsTitle");
		}
		
		private void OnCategory2ProjectsTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Category.Add(this);
			}
			else {
				e.Item.Category.Remove(this);
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2CategoryTitle = this;
			}
			else {
				e.Item.Task2CategoryTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Contracts Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Contracts", Id="0x0100DABE2F02363F46BCB5699B2E6DDA8A82")]
	public partial class Contracts : Element {
		
		private string _contractNumber;
		
		private string _contractSubject;
		
		private System.Nullable<System.DateTime> _contractDate;
		
		private System.Nullable<System.DateTime> _contractEndDate;
		
		private System.Nullable<System.DateTime> _contractWarrantyDate;
		
		private string _contractOffer;
		
		private System.Nullable<double> _contractValue;
		
		private string _body;
		
		private System.Nullable<Currency> _currency;
		
		private Microsoft.SharePoint.Linq.EntityRef<Partners> _contracts2PartnersTitle;
		
		private Microsoft.SharePoint.Linq.EntitySet<Projects> _projects;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Contracts() {
			this._contracts2PartnersTitle = new Microsoft.SharePoint.Linq.EntityRef<Partners>();
			this._contracts2PartnersTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Partners>>(this.OnContracts2PartnersTitleSync);
			this._contracts2PartnersTitle.OnChanged += new System.EventHandler(this.OnContracts2PartnersTitleChanged);
			this._contracts2PartnersTitle.OnChanging += new System.EventHandler(this.OnContracts2PartnersTitleChanging);
			this._projects = new Microsoft.SharePoint.Linq.EntitySet<Projects>();
			this._projects.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnProjectsSync);
			this._projects.OnChanged += new System.EventHandler(this.OnProjectsChanged);
			this._projects.OnChanging += new System.EventHandler(this.OnProjectsChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContractNumber", Storage="_contractNumber", FieldType="Text")]
		public string ContractNumber {
			get {
				return this._contractNumber;
			}
			set {
				if ((value != this._contractNumber)) {
					this.OnPropertyChanging("ContractNumber", this._contractNumber);
					this._contractNumber = value;
					this.OnPropertyChanged("ContractNumber");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContractSubject", Storage="_contractSubject", FieldType="Text")]
		public string ContractSubject {
			get {
				return this._contractSubject;
			}
			set {
				if ((value != this._contractSubject)) {
					this.OnPropertyChanging("ContractSubject", this._contractSubject);
					this._contractSubject = value;
					this.OnPropertyChanged("ContractSubject");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContractDate", Storage="_contractDate", FieldType="DateTime")]
		public System.Nullable<System.DateTime> ContractDate {
			get {
				return this._contractDate;
			}
			set {
				if ((value != this._contractDate)) {
					this.OnPropertyChanging("ContractDate", this._contractDate);
					this._contractDate = value;
					this.OnPropertyChanged("ContractDate");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContractEndDate", Storage="_contractEndDate", FieldType="DateTime")]
		public System.Nullable<System.DateTime> ContractEndDate {
			get {
				return this._contractEndDate;
			}
			set {
				if ((value != this._contractEndDate)) {
					this.OnPropertyChanging("ContractEndDate", this._contractEndDate);
					this._contractEndDate = value;
					this.OnPropertyChanged("ContractEndDate");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContractWarrantyDate", Storage="_contractWarrantyDate", FieldType="DateTime")]
		public System.Nullable<System.DateTime> ContractWarrantyDate {
			get {
				return this._contractWarrantyDate;
			}
			set {
				if ((value != this._contractWarrantyDate)) {
					this.OnPropertyChanging("ContractWarrantyDate", this._contractWarrantyDate);
					this._contractWarrantyDate = value;
					this.OnPropertyChanged("ContractWarrantyDate");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContractOffer", Storage="_contractOffer", FieldType="Text")]
		public string ContractOffer {
			get {
				return this._contractOffer;
			}
			set {
				if ((value != this._contractOffer)) {
					this.OnPropertyChanging("ContractOffer", this._contractOffer);
					this._contractOffer = value;
					this.OnPropertyChanged("ContractOffer");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContractValue", Storage="_contractValue", FieldType="Number")]
		public System.Nullable<double> ContractValue {
			get {
				return this._contractValue;
			}
			set {
				if ((value != this._contractValue)) {
					this.OnPropertyChanging("ContractValue", this._contractValue);
					this._contractValue = value;
					this.OnPropertyChanged("ContractValue");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
		public string Body {
			get {
				return this._body;
			}
			set {
				if ((value != this._body)) {
					this.OnPropertyChanging("Body", this._body);
					this._body = value;
					this.OnPropertyChanged("Body");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Currency", Storage="_currency", FieldType="Choice")]
		public System.Nullable<Currency> Currency {
			get {
				return this._currency;
			}
			set {
				if ((value != this._currency)) {
					this.OnPropertyChanging("Currency", this._currency);
					this._currency = value;
					this.OnPropertyChanged("Currency");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Contracts2PartnersTitle", Storage="_contracts2PartnersTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Partners")]
		public Partners Contracts2PartnersTitle {
			get {
				return this._contracts2PartnersTitle.GetEntity();
			}
			set {
				this._contracts2PartnersTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2ContractTitle", Storage="_projects", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Projects")]
		public Microsoft.SharePoint.Linq.EntitySet<Projects> Projects {
			get {
				return this._projects;
			}
			set {
				this._projects.Assign(value);
			}
		}
		
		private void OnContracts2PartnersTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Contracts2PartnersTitle", this._contracts2PartnersTitle.Clone());
		}
		
		private void OnContracts2PartnersTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Contracts2PartnersTitle");
		}
		
		private void OnContracts2PartnersTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Partners> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Contracts.Add(this);
			}
			else {
				e.Item.Contracts.Remove(this);
			}
		}
		
		private void OnProjectsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Projects", this._projects.Clone());
		}
		
		private void OnProjectsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Projects");
		}
		
		private void OnProjectsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Project2ContractTitle = this;
			}
			else {
				e.Item.Project2ContractTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Estimation Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Estimation", Id="0x01001AF97106D9F1498B82C9980861B39EA1")]
	public partial class Estimation : Element {
		
		private System.Nullable<double> _estimatedWorkload;
		
		private Microsoft.SharePoint.Linq.EntityRef<Resources> _estimation2ResourcesTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Projects> _estimation2ProjectTitle;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Estimation() {
			this._estimation2ResourcesTitle = new Microsoft.SharePoint.Linq.EntityRef<Resources>();
			this._estimation2ResourcesTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources>>(this.OnEstimation2ResourcesTitleSync);
			this._estimation2ResourcesTitle.OnChanged += new System.EventHandler(this.OnEstimation2ResourcesTitleChanged);
			this._estimation2ResourcesTitle.OnChanging += new System.EventHandler(this.OnEstimation2ResourcesTitleChanging);
			this._estimation2ProjectTitle = new Microsoft.SharePoint.Linq.EntityRef<Projects>();
			this._estimation2ProjectTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnEstimation2ProjectTitleSync);
			this._estimation2ProjectTitle.OnChanged += new System.EventHandler(this.OnEstimation2ProjectTitleChanged);
			this._estimation2ProjectTitle.OnChanging += new System.EventHandler(this.OnEstimation2ProjectTitleChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EstimatedWorkload", Storage="_estimatedWorkload", FieldType="Number")]
		public System.Nullable<double> EstimatedWorkload {
			get {
				return this._estimatedWorkload;
			}
			set {
				if ((value != this._estimatedWorkload)) {
					this.OnPropertyChanging("EstimatedWorkload", this._estimatedWorkload);
					this._estimatedWorkload = value;
					this.OnPropertyChanged("EstimatedWorkload");
				}
			}
		}
		
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
		[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
		public override string Title {
			get {
				throw new System.InvalidOperationException("Pole Title zostało usunięte z typu zawartości Estimation.");
			}
			set {
				throw new System.InvalidOperationException("Pole Title zostało usunięte z typu zawartości Estimation.");
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Estimation2ResourcesTitle", Storage="_estimation2ResourcesTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Resources")]
		public Resources Estimation2ResourcesTitle {
			get {
				return this._estimation2ResourcesTitle.GetEntity();
			}
			set {
				this._estimation2ResourcesTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Estimation2ProjectTitle", Storage="_estimation2ProjectTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
		public Projects Estimation2ProjectTitle {
			get {
				return this._estimation2ProjectTitle.GetEntity();
			}
			set {
				this._estimation2ProjectTitle.SetEntity(value);
			}
		}
		
		private void OnEstimation2ResourcesTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Estimation2ResourcesTitle", this._estimation2ResourcesTitle.Clone());
		}
		
		private void OnEstimation2ResourcesTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Estimation2ResourcesTitle");
		}
		
		private void OnEstimation2ResourcesTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Estimation.Add(this);
			}
			else {
				e.Item.Estimation.Remove(this);
			}
		}
		
		private void OnEstimation2ProjectTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Estimation2ProjectTitle", this._estimation2ProjectTitle.Clone());
		}
		
		private void OnEstimation2ProjectTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Estimation2ProjectTitle");
		}
		
		private void OnEstimation2ProjectTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Estimation.Add(this);
			}
			else {
				e.Item.Estimation.Remove(this);
			}
		}
	}
	
	/// <summary>
	/// Milestone Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Milestone", Id="0x0100EB00A9F1B21F48A699409A797C893B5A")]
	public partial class Milestone : Element {
		
		private System.Nullable<bool> _active;
		
		private System.Nullable<double> _milestoneHours;
		
		private System.Nullable<double> _sortOrder;
		
		private System.Nullable<System.DateTime> _milestoneStart;
		
		private System.Nullable<System.DateTime> _milestoneEnd;
		
		private System.Nullable<System.DateTime> _baselineStart;
		
		private System.Nullable<System.DateTime> _baselineEnd;
		
		private System.Nullable<bool> _default;
		
		private System.Nullable<double> _acceptedHours;
		
		private System.Nullable<double> _estimatedHours;
		
		private string _milestoneDescription;
		
		private Microsoft.SharePoint.Linq.EntityRef<Stage> _milestone2StageTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Projects> _milestone2ProjectTitle;
		
		private Microsoft.SharePoint.Linq.EntitySet<Requirements> _requirements;
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks0;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Milestone() {
			this._milestone2StageTitle = new Microsoft.SharePoint.Linq.EntityRef<Stage>();
			this._milestone2StageTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Stage>>(this.OnMilestone2StageTitleSync);
			this._milestone2StageTitle.OnChanged += new System.EventHandler(this.OnMilestone2StageTitleChanged);
			this._milestone2StageTitle.OnChanging += new System.EventHandler(this.OnMilestone2StageTitleChanging);
			this._milestone2ProjectTitle = new Microsoft.SharePoint.Linq.EntityRef<Projects>();
			this._milestone2ProjectTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnMilestone2ProjectTitleSync);
			this._milestone2ProjectTitle.OnChanged += new System.EventHandler(this.OnMilestone2ProjectTitleChanged);
			this._milestone2ProjectTitle.OnChanging += new System.EventHandler(this.OnMilestone2ProjectTitleChanging);
			this._requirements = new Microsoft.SharePoint.Linq.EntitySet<Requirements>();
			this._requirements.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Requirements>>(this.OnRequirementsSync);
			this._requirements.OnChanged += new System.EventHandler(this.OnRequirementsChanged);
			this._requirements.OnChanging += new System.EventHandler(this.OnRequirementsChanging);
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this._tasks0 = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks0.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasks0Sync);
			this._tasks0.OnChanged += new System.EventHandler(this.OnTasks0Changed);
			this._tasks0.OnChanging += new System.EventHandler(this.OnTasks0Changing);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Active", Storage="_active", FieldType="Boolean")]
		public System.Nullable<bool> Active {
			get {
				return this._active;
			}
			set {
				if ((value != this._active)) {
					this.OnPropertyChanging("Active", this._active);
					this._active = value;
					this.OnPropertyChanged("Active");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="MilestoneHours", Storage="_milestoneHours", FieldType="Number")]
		public System.Nullable<double> MilestoneHours {
			get {
				return this._milestoneHours;
			}
			set {
				if ((value != this._milestoneHours)) {
					this.OnPropertyChanging("MilestoneHours", this._milestoneHours);
					this._milestoneHours = value;
					this.OnPropertyChanged("MilestoneHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="SortOrder", Storage="_sortOrder", FieldType="Number")]
		public System.Nullable<double> SortOrder {
			get {
				return this._sortOrder;
			}
			set {
				if ((value != this._sortOrder)) {
					this.OnPropertyChanging("SortOrder", this._sortOrder);
					this._sortOrder = value;
					this.OnPropertyChanged("SortOrder");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="MilestoneStart", Storage="_milestoneStart", FieldType="DateTime")]
		public System.Nullable<System.DateTime> MilestoneStart {
			get {
				return this._milestoneStart;
			}
			set {
				if ((value != this._milestoneStart)) {
					this.OnPropertyChanging("MilestoneStart", this._milestoneStart);
					this._milestoneStart = value;
					this.OnPropertyChanged("MilestoneStart");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="MilestoneEnd", Storage="_milestoneEnd", FieldType="DateTime")]
		public System.Nullable<System.DateTime> MilestoneEnd {
			get {
				return this._milestoneEnd;
			}
			set {
				if ((value != this._milestoneEnd)) {
					this.OnPropertyChanging("MilestoneEnd", this._milestoneEnd);
					this._milestoneEnd = value;
					this.OnPropertyChanged("MilestoneEnd");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="BaselineStart", Storage="_baselineStart", FieldType="DateTime")]
		public System.Nullable<System.DateTime> BaselineStart {
			get {
				return this._baselineStart;
			}
			set {
				if ((value != this._baselineStart)) {
					this.OnPropertyChanging("BaselineStart", this._baselineStart);
					this._baselineStart = value;
					this.OnPropertyChanged("BaselineStart");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="BaselineEnd", Storage="_baselineEnd", FieldType="DateTime")]
		public System.Nullable<System.DateTime> BaselineEnd {
			get {
				return this._baselineEnd;
			}
			set {
				if ((value != this._baselineEnd)) {
					this.OnPropertyChanging("BaselineEnd", this._baselineEnd);
					this._baselineEnd = value;
					this.OnPropertyChanged("BaselineEnd");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Default", Storage="_default", FieldType="Boolean")]
		public System.Nullable<bool> Default {
			get {
				return this._default;
			}
			set {
				if ((value != this._default)) {
					this.OnPropertyChanging("Default", this._default);
					this._default = value;
					this.OnPropertyChanged("Default");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="AcceptedHours", Storage="_acceptedHours", FieldType="Number")]
		public System.Nullable<double> AcceptedHours {
			get {
				return this._acceptedHours;
			}
			set {
				if ((value != this._acceptedHours)) {
					this.OnPropertyChanging("AcceptedHours", this._acceptedHours);
					this._acceptedHours = value;
					this.OnPropertyChanged("AcceptedHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EstimatedHours", Storage="_estimatedHours", FieldType="Number")]
		public System.Nullable<double> EstimatedHours {
			get {
				return this._estimatedHours;
			}
			set {
				if ((value != this._estimatedHours)) {
					this.OnPropertyChanging("EstimatedHours", this._estimatedHours);
					this._estimatedHours = value;
					this.OnPropertyChanged("EstimatedHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="MilestoneDescription", Storage="_milestoneDescription", FieldType="Text")]
		public string MilestoneDescription {
			get {
				return this._milestoneDescription;
			}
			set {
				if ((value != this._milestoneDescription)) {
					this.OnPropertyChanging("MilestoneDescription", this._milestoneDescription);
					this._milestoneDescription = value;
					this.OnPropertyChanged("MilestoneDescription");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone2StageTitle", Storage="_milestone2StageTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Stage")]
		public Stage Milestone2StageTitle {
			get {
				return this._milestone2StageTitle.GetEntity();
			}
			set {
				this._milestone2StageTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone2ProjectTitle", Storage="_milestone2ProjectTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
		public Projects Milestone2ProjectTitle {
			get {
				return this._milestone2ProjectTitle.GetEntity();
			}
			set {
				this._milestone2ProjectTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Requirements2MilestoneTitle", Storage="_requirements", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Requirements")]
		public Microsoft.SharePoint.Linq.EntitySet<Requirements> Requirements {
			get {
				return this._requirements;
			}
			set {
				this._requirements.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2MilestoneDefinedInTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2MilestoneResolvedInTitle", Storage="_tasks0", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks0 {
			get {
				return this._tasks0;
			}
			set {
				this._tasks0.Assign(value);
			}
		}
		
		private void OnMilestone2StageTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Milestone2StageTitle", this._milestone2StageTitle.Clone());
		}
		
		private void OnMilestone2StageTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Milestone2StageTitle");
		}
		
		private void OnMilestone2StageTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Stage> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Milestone.Add(this);
			}
			else {
				e.Item.Milestone.Remove(this);
			}
		}
		
		private void OnMilestone2ProjectTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Milestone2ProjectTitle", this._milestone2ProjectTitle.Clone());
		}
		
		private void OnMilestone2ProjectTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Milestone2ProjectTitle");
		}
		
		private void OnMilestone2ProjectTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Milestone.Add(this);
			}
			else {
				e.Item.Milestone.Remove(this);
			}
		}
		
		private void OnRequirementsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Requirements", this._requirements.Clone());
		}
		
		private void OnRequirementsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Requirements");
		}
		
		private void OnRequirementsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Requirements> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Requirements2MilestoneTitle = this;
			}
			else {
				e.Item.Requirements2MilestoneTitle = null;
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2MilestoneDefinedInTitle = this;
			}
			else {
				e.Item.Task2MilestoneDefinedInTitle = null;
			}
		}
		
		private void OnTasks0Changing(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks0", this._tasks0.Clone());
		}
		
		private void OnTasks0Changed(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks0");
		}
		
		private void OnTasks0Sync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2MilestoneResolvedInTitle = this;
			}
			else {
				e.Item.Task2MilestoneResolvedInTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Partners Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Partners", Id="0x0100E64D1186D14D472EB1984F194359BB20")]
	public partial class Partners : Element {
		
		private string _workCountry;
		
		private string _workCity;
		
		private string _workZip;
		
		private string _workAddress;
		
		private string _workPhone;
		
		private string _workFax;
		
		private string _cellPhone;
		
		private string _eMail;
		
		private string _body;
		
		private Microsoft.SharePoint.Linq.EntitySet<Contracts> _contracts;
		
		private Microsoft.SharePoint.Linq.EntitySet<Projects> _projects;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Partners() {
			this._contracts = new Microsoft.SharePoint.Linq.EntitySet<Contracts>();
			this._contracts.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Contracts>>(this.OnContractsSync);
			this._contracts.OnChanged += new System.EventHandler(this.OnContractsChanged);
			this._contracts.OnChanging += new System.EventHandler(this.OnContractsChanging);
			this._projects = new Microsoft.SharePoint.Linq.EntitySet<Projects>();
			this._projects.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnProjectsSync);
			this._projects.OnChanged += new System.EventHandler(this.OnProjectsChanged);
			this._projects.OnChanging += new System.EventHandler(this.OnProjectsChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WorkCountry", Storage="_workCountry", FieldType="Text")]
		public string WorkCountry {
			get {
				return this._workCountry;
			}
			set {
				if ((value != this._workCountry)) {
					this.OnPropertyChanging("WorkCountry", this._workCountry);
					this._workCountry = value;
					this.OnPropertyChanged("WorkCountry");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WorkCity", Storage="_workCity", FieldType="Text")]
		public string WorkCity {
			get {
				return this._workCity;
			}
			set {
				if ((value != this._workCity)) {
					this.OnPropertyChanging("WorkCity", this._workCity);
					this._workCity = value;
					this.OnPropertyChanged("WorkCity");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WorkZip", Storage="_workZip", FieldType="Text")]
		public string WorkZip {
			get {
				return this._workZip;
			}
			set {
				if ((value != this._workZip)) {
					this.OnPropertyChanging("WorkZip", this._workZip);
					this._workZip = value;
					this.OnPropertyChanged("WorkZip");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WorkAddress", Storage="_workAddress", FieldType="Note")]
		public string WorkAddress {
			get {
				return this._workAddress;
			}
			set {
				if ((value != this._workAddress)) {
					this.OnPropertyChanging("WorkAddress", this._workAddress);
					this._workAddress = value;
					this.OnPropertyChanged("WorkAddress");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WorkPhone", Storage="_workPhone", FieldType="Text")]
		public string WorkPhone {
			get {
				return this._workPhone;
			}
			set {
				if ((value != this._workPhone)) {
					this.OnPropertyChanging("WorkPhone", this._workPhone);
					this._workPhone = value;
					this.OnPropertyChanged("WorkPhone");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WorkFax", Storage="_workFax", FieldType="Text")]
		public string WorkFax {
			get {
				return this._workFax;
			}
			set {
				if ((value != this._workFax)) {
					this.OnPropertyChanging("WorkFax", this._workFax);
					this._workFax = value;
					this.OnPropertyChanged("WorkFax");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="CellPhone", Storage="_cellPhone", FieldType="Text")]
		public string CellPhone {
			get {
				return this._cellPhone;
			}
			set {
				if ((value != this._cellPhone)) {
					this.OnPropertyChanging("CellPhone", this._cellPhone);
					this._cellPhone = value;
					this.OnPropertyChanged("CellPhone");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EMail", Storage="_eMail", FieldType="Text")]
		public string EMail {
			get {
				return this._eMail;
			}
			set {
				if ((value != this._eMail)) {
					this.OnPropertyChanging("EMail", this._eMail);
					this._eMail = value;
					this.OnPropertyChanged("EMail");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
		public string Body {
			get {
				return this._body;
			}
			set {
				if ((value != this._body)) {
					this.OnPropertyChanging("Body", this._body);
					this._body = value;
					this.OnPropertyChanged("Body");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Contracts2PartnersTitle", Storage="_contracts", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Contracts")]
		public Microsoft.SharePoint.Linq.EntitySet<Contracts> Contracts {
			get {
				return this._contracts;
			}
			set {
				this._contracts.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2PartnersTitle", Storage="_projects", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Projects")]
		public Microsoft.SharePoint.Linq.EntitySet<Projects> Projects {
			get {
				return this._projects;
			}
			set {
				this._projects.Assign(value);
			}
		}
		
		private void OnContractsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Contracts", this._contracts.Clone());
		}
		
		private void OnContractsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Contracts");
		}
		
		private void OnContractsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Contracts> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Contracts2PartnersTitle = this;
			}
			else {
				e.Item.Contracts2PartnersTitle = null;
			}
		}
		
		private void OnProjectsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Projects", this._projects.Clone());
		}
		
		private void OnProjectsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Projects");
		}
		
		private void OnProjectsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Project2PartnersTitle = this;
			}
			else {
				e.Item.Project2PartnersTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Priority Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Priority", Id="0x01008A82AC63B9A949DA95DAA3E970754393")]
	public partial class Priority : Element {
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Priority() {
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2SPriorityTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2SPriorityTitle = this;
			}
			else {
				e.Item.Task2SPriorityTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Projects Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Projects", Id="0x01000C2CCABBA2E1473BA2623EFDA04E749E")]
	public partial class Projects : Element {
		
		private string _projectNumber;
		
		private System.Nullable<bool> _active;
		
		private System.Nullable<double> _projectHours;
		
		private System.Nullable<System.DateTime> _projectStartDate;
		
		private System.Nullable<System.DateTime> _projectEndDate;
		
		private System.Nullable<System.DateTime> _projectWarrantyDate;
		
		private System.Nullable<double> _projectBudget;
		
		private string _body;
		
		private System.Nullable<double> _estimatedHours;
		
		private System.Nullable<double> _acceptedHours;
		
		private System.Nullable<double> _milestoneHours;
		
		private System.Nullable<System.DateTime> _baselineStart;
		
		private System.Nullable<System.DateTime> _baselineEnd;
		
		private string _pONumber;
		
		private System.Nullable<ProjectType> _projectType;
		
		private System.Nullable<Currency> _currency;
		
		private Microsoft.SharePoint.Linq.EntitySet<Category> _category;
		
		private Microsoft.SharePoint.Linq.EntitySet<Estimation> _estimation;
		
		private Microsoft.SharePoint.Linq.EntitySet<Milestone> _milestone;
		
		private Microsoft.SharePoint.Linq.EntityRef<Resources> _project2ResourcesTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Contracts> _project2ContractTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Stage> _project2StageTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Partners> _project2PartnersTitle;
		
		private Microsoft.SharePoint.Linq.EntitySet<Requirements> _requirements;
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		private Microsoft.SharePoint.Linq.EntitySet<Workload> _workload;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Projects() {
			this._category = new Microsoft.SharePoint.Linq.EntitySet<Category>();
			this._category.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Category>>(this.OnCategorySync);
			this._category.OnChanged += new System.EventHandler(this.OnCategoryChanged);
			this._category.OnChanging += new System.EventHandler(this.OnCategoryChanging);
			this._estimation = new Microsoft.SharePoint.Linq.EntitySet<Estimation>();
			this._estimation.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Estimation>>(this.OnEstimationSync);
			this._estimation.OnChanged += new System.EventHandler(this.OnEstimationChanged);
			this._estimation.OnChanging += new System.EventHandler(this.OnEstimationChanging);
			this._milestone = new Microsoft.SharePoint.Linq.EntitySet<Milestone>();
			this._milestone.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone>>(this.OnMilestoneSync);
			this._milestone.OnChanged += new System.EventHandler(this.OnMilestoneChanged);
			this._milestone.OnChanging += new System.EventHandler(this.OnMilestoneChanging);
			this._project2ResourcesTitle = new Microsoft.SharePoint.Linq.EntityRef<Resources>();
			this._project2ResourcesTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources>>(this.OnProject2ResourcesTitleSync);
			this._project2ResourcesTitle.OnChanged += new System.EventHandler(this.OnProject2ResourcesTitleChanged);
			this._project2ResourcesTitle.OnChanging += new System.EventHandler(this.OnProject2ResourcesTitleChanging);
			this._project2ContractTitle = new Microsoft.SharePoint.Linq.EntityRef<Contracts>();
			this._project2ContractTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Contracts>>(this.OnProject2ContractTitleSync);
			this._project2ContractTitle.OnChanged += new System.EventHandler(this.OnProject2ContractTitleChanged);
			this._project2ContractTitle.OnChanging += new System.EventHandler(this.OnProject2ContractTitleChanging);
			this._project2StageTitle = new Microsoft.SharePoint.Linq.EntityRef<Stage>();
			this._project2StageTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Stage>>(this.OnProject2StageTitleSync);
			this._project2StageTitle.OnChanged += new System.EventHandler(this.OnProject2StageTitleChanged);
			this._project2StageTitle.OnChanging += new System.EventHandler(this.OnProject2StageTitleChanging);
			this._project2PartnersTitle = new Microsoft.SharePoint.Linq.EntityRef<Partners>();
			this._project2PartnersTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Partners>>(this.OnProject2PartnersTitleSync);
			this._project2PartnersTitle.OnChanged += new System.EventHandler(this.OnProject2PartnersTitleChanged);
			this._project2PartnersTitle.OnChanging += new System.EventHandler(this.OnProject2PartnersTitleChanging);
			this._requirements = new Microsoft.SharePoint.Linq.EntitySet<Requirements>();
			this._requirements.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Requirements>>(this.OnRequirementsSync);
			this._requirements.OnChanged += new System.EventHandler(this.OnRequirementsChanged);
			this._requirements.OnChanging += new System.EventHandler(this.OnRequirementsChanging);
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this._workload = new Microsoft.SharePoint.Linq.EntitySet<Workload>();
			this._workload.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload>>(this.OnWorkloadSync);
			this._workload.OnChanged += new System.EventHandler(this.OnWorkloadChanged);
			this._workload.OnChanging += new System.EventHandler(this.OnWorkloadChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ProjectNumber", Storage="_projectNumber", FieldType="Text")]
		public string ProjectNumber {
			get {
				return this._projectNumber;
			}
			set {
				if ((value != this._projectNumber)) {
					this.OnPropertyChanging("ProjectNumber", this._projectNumber);
					this._projectNumber = value;
					this.OnPropertyChanged("ProjectNumber");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Active", Storage="_active", FieldType="Boolean")]
		public System.Nullable<bool> Active {
			get {
				return this._active;
			}
			set {
				if ((value != this._active)) {
					this.OnPropertyChanging("Active", this._active);
					this._active = value;
					this.OnPropertyChanged("Active");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ProjectHours", Storage="_projectHours", FieldType="Number")]
		public System.Nullable<double> ProjectHours {
			get {
				return this._projectHours;
			}
			set {
				if ((value != this._projectHours)) {
					this.OnPropertyChanging("ProjectHours", this._projectHours);
					this._projectHours = value;
					this.OnPropertyChanged("ProjectHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ProjectStartDate", Storage="_projectStartDate", FieldType="DateTime")]
		public System.Nullable<System.DateTime> ProjectStartDate {
			get {
				return this._projectStartDate;
			}
			set {
				if ((value != this._projectStartDate)) {
					this.OnPropertyChanging("ProjectStartDate", this._projectStartDate);
					this._projectStartDate = value;
					this.OnPropertyChanged("ProjectStartDate");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ProjectEndDate", Storage="_projectEndDate", FieldType="DateTime")]
		public System.Nullable<System.DateTime> ProjectEndDate {
			get {
				return this._projectEndDate;
			}
			set {
				if ((value != this._projectEndDate)) {
					this.OnPropertyChanging("ProjectEndDate", this._projectEndDate);
					this._projectEndDate = value;
					this.OnPropertyChanged("ProjectEndDate");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ProjectWarrantyDate", Storage="_projectWarrantyDate", FieldType="DateTime")]
		public System.Nullable<System.DateTime> ProjectWarrantyDate {
			get {
				return this._projectWarrantyDate;
			}
			set {
				if ((value != this._projectWarrantyDate)) {
					this.OnPropertyChanging("ProjectWarrantyDate", this._projectWarrantyDate);
					this._projectWarrantyDate = value;
					this.OnPropertyChanged("ProjectWarrantyDate");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ProjectBudget", Storage="_projectBudget", FieldType="Number")]
		public System.Nullable<double> ProjectBudget {
			get {
				return this._projectBudget;
			}
			set {
				if ((value != this._projectBudget)) {
					this.OnPropertyChanging("ProjectBudget", this._projectBudget);
					this._projectBudget = value;
					this.OnPropertyChanged("ProjectBudget");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
		public string Body {
			get {
				return this._body;
			}
			set {
				if ((value != this._body)) {
					this.OnPropertyChanging("Body", this._body);
					this._body = value;
					this.OnPropertyChanged("Body");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EstimatedHours", Storage="_estimatedHours", FieldType="Number")]
		public System.Nullable<double> EstimatedHours {
			get {
				return this._estimatedHours;
			}
			set {
				if ((value != this._estimatedHours)) {
					this.OnPropertyChanging("EstimatedHours", this._estimatedHours);
					this._estimatedHours = value;
					this.OnPropertyChanged("EstimatedHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="AcceptedHours", Storage="_acceptedHours", FieldType="Number")]
		public System.Nullable<double> AcceptedHours {
			get {
				return this._acceptedHours;
			}
			set {
				if ((value != this._acceptedHours)) {
					this.OnPropertyChanging("AcceptedHours", this._acceptedHours);
					this._acceptedHours = value;
					this.OnPropertyChanged("AcceptedHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="MilestoneHours", Storage="_milestoneHours", FieldType="Number")]
		public System.Nullable<double> MilestoneHours {
			get {
				return this._milestoneHours;
			}
			set {
				if ((value != this._milestoneHours)) {
					this.OnPropertyChanging("MilestoneHours", this._milestoneHours);
					this._milestoneHours = value;
					this.OnPropertyChanged("MilestoneHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="BaselineStart", Storage="_baselineStart", FieldType="DateTime")]
		public System.Nullable<System.DateTime> BaselineStart {
			get {
				return this._baselineStart;
			}
			set {
				if ((value != this._baselineStart)) {
					this.OnPropertyChanging("BaselineStart", this._baselineStart);
					this._baselineStart = value;
					this.OnPropertyChanged("BaselineStart");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="BaselineEnd", Storage="_baselineEnd", FieldType="DateTime")]
		public System.Nullable<System.DateTime> BaselineEnd {
			get {
				return this._baselineEnd;
			}
			set {
				if ((value != this._baselineEnd)) {
					this.OnPropertyChanging("BaselineEnd", this._baselineEnd);
					this._baselineEnd = value;
					this.OnPropertyChanged("BaselineEnd");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="PONumber", Storage="_pONumber", FieldType="Text")]
		public string PONumber {
			get {
				return this._pONumber;
			}
			set {
				if ((value != this._pONumber)) {
					this.OnPropertyChanging("PONumber", this._pONumber);
					this._pONumber = value;
					this.OnPropertyChanged("PONumber");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ProjectType", Storage="_projectType", FieldType="Choice")]
		public System.Nullable<ProjectType> ProjectType {
			get {
				return this._projectType;
			}
			set {
				if ((value != this._projectType)) {
					this.OnPropertyChanging("ProjectType", this._projectType);
					this._projectType = value;
					this.OnPropertyChanged("ProjectType");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Currency", Storage="_currency", FieldType="Choice")]
		public System.Nullable<Currency> Currency {
			get {
				return this._currency;
			}
			set {
				if ((value != this._currency)) {
					this.OnPropertyChanging("Currency", this._currency);
					this._currency = value;
					this.OnPropertyChanged("Currency");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Category2ProjectsTitle", Storage="_category", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Category")]
		public Microsoft.SharePoint.Linq.EntitySet<Category> Category {
			get {
				return this._category;
			}
			set {
				this._category.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Estimation2ProjectTitle", Storage="_estimation", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Estimation")]
		public Microsoft.SharePoint.Linq.EntitySet<Estimation> Estimation {
			get {
				return this._estimation;
			}
			set {
				this._estimation.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone2ProjectTitle", Storage="_milestone", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Milestone")]
		public Microsoft.SharePoint.Linq.EntitySet<Milestone> Milestone {
			get {
				return this._milestone;
			}
			set {
				this._milestone.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2ResourcesTitle", Storage="_project2ResourcesTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Resources")]
		public Resources Project2ResourcesTitle {
			get {
				return this._project2ResourcesTitle.GetEntity();
			}
			set {
				this._project2ResourcesTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2ContractTitle", Storage="_project2ContractTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Contracts")]
		public Contracts Project2ContractTitle {
			get {
				return this._project2ContractTitle.GetEntity();
			}
			set {
				this._project2ContractTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2StageTitle", Storage="_project2StageTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Stage")]
		public Stage Project2StageTitle {
			get {
				return this._project2StageTitle.GetEntity();
			}
			set {
				this._project2StageTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2PartnersTitle", Storage="_project2PartnersTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Partners")]
		public Partners Project2PartnersTitle {
			get {
				return this._project2PartnersTitle.GetEntity();
			}
			set {
				this._project2PartnersTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Requirements2ProjectsTitle", Storage="_requirements", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Requirements")]
		public Microsoft.SharePoint.Linq.EntitySet<Requirements> Requirements {
			get {
				return this._requirements;
			}
			set {
				this._requirements.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2ProjectTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2ProjectTitle", Storage="_workload", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Workload")]
		public Microsoft.SharePoint.Linq.EntitySet<Workload> Workload {
			get {
				return this._workload;
			}
			set {
				this._workload.Assign(value);
			}
		}
		
		private void OnCategoryChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Category", this._category.Clone());
		}
		
		private void OnCategoryChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Category");
		}
		
		private void OnCategorySync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Category> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Category2ProjectsTitle = this;
			}
			else {
				e.Item.Category2ProjectsTitle = null;
			}
		}
		
		private void OnEstimationChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Estimation", this._estimation.Clone());
		}
		
		private void OnEstimationChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Estimation");
		}
		
		private void OnEstimationSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Estimation> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Estimation2ProjectTitle = this;
			}
			else {
				e.Item.Estimation2ProjectTitle = null;
			}
		}
		
		private void OnMilestoneChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Milestone", this._milestone.Clone());
		}
		
		private void OnMilestoneChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Milestone");
		}
		
		private void OnMilestoneSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Milestone2ProjectTitle = this;
			}
			else {
				e.Item.Milestone2ProjectTitle = null;
			}
		}
		
		private void OnProject2ResourcesTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Project2ResourcesTitle", this._project2ResourcesTitle.Clone());
		}
		
		private void OnProject2ResourcesTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Project2ResourcesTitle");
		}
		
		private void OnProject2ResourcesTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Projects.Add(this);
			}
			else {
				e.Item.Projects.Remove(this);
			}
		}
		
		private void OnProject2ContractTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Project2ContractTitle", this._project2ContractTitle.Clone());
		}
		
		private void OnProject2ContractTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Project2ContractTitle");
		}
		
		private void OnProject2ContractTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Contracts> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Projects.Add(this);
			}
			else {
				e.Item.Projects.Remove(this);
			}
		}
		
		private void OnProject2StageTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Project2StageTitle", this._project2StageTitle.Clone());
		}
		
		private void OnProject2StageTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Project2StageTitle");
		}
		
		private void OnProject2StageTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Stage> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Projects.Add(this);
			}
			else {
				e.Item.Projects.Remove(this);
			}
		}
		
		private void OnProject2PartnersTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Project2PartnersTitle", this._project2PartnersTitle.Clone());
		}
		
		private void OnProject2PartnersTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Project2PartnersTitle");
		}
		
		private void OnProject2PartnersTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Partners> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Projects.Add(this);
			}
			else {
				e.Item.Projects.Remove(this);
			}
		}
		
		private void OnRequirementsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Requirements", this._requirements.Clone());
		}
		
		private void OnRequirementsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Requirements");
		}
		
		private void OnRequirementsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Requirements> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Requirements2ProjectsTitle = this;
			}
			else {
				e.Item.Requirements2ProjectsTitle = null;
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2ProjectTitle = this;
			}
			else {
				e.Item.Task2ProjectTitle = null;
			}
		}
		
		private void OnWorkloadChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload", this._workload.Clone());
		}
		
		private void OnWorkloadChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload");
		}
		
		private void OnWorkloadSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload2ProjectTitle = this;
			}
			else {
				e.Item.Workload2ProjectTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Requirements Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Requirements", Id="0x01008B9076C2C55F47A298C387804D856FC8")]
	public partial class Requirements : Element {
		
		private System.Nullable<int> _requirementPriority;
		
		private string _body;
		
		private System.Nullable<double> _estimatedHours;
		
		private System.Nullable<double> _hours;
		
		private System.Nullable<RequirementsType> _requirementsType;
		
		private Microsoft.SharePoint.Linq.EntityRef<Projects> _requirements2ProjectsTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Milestone> _requirements2MilestoneTitle;
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Requirements() {
			this._requirements2ProjectsTitle = new Microsoft.SharePoint.Linq.EntityRef<Projects>();
			this._requirements2ProjectsTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnRequirements2ProjectsTitleSync);
			this._requirements2ProjectsTitle.OnChanged += new System.EventHandler(this.OnRequirements2ProjectsTitleChanged);
			this._requirements2ProjectsTitle.OnChanging += new System.EventHandler(this.OnRequirements2ProjectsTitleChanging);
			this._requirements2MilestoneTitle = new Microsoft.SharePoint.Linq.EntityRef<Milestone>();
			this._requirements2MilestoneTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone>>(this.OnRequirements2MilestoneTitleSync);
			this._requirements2MilestoneTitle.OnChanged += new System.EventHandler(this.OnRequirements2MilestoneTitleChanged);
			this._requirements2MilestoneTitle.OnChanging += new System.EventHandler(this.OnRequirements2MilestoneTitleChanging);
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="RequirementPriority", Storage="_requirementPriority", FieldType="Integer")]
		public System.Nullable<int> RequirementPriority {
			get {
				return this._requirementPriority;
			}
			set {
				if ((value != this._requirementPriority)) {
					this.OnPropertyChanging("RequirementPriority", this._requirementPriority);
					this._requirementPriority = value;
					this.OnPropertyChanged("RequirementPriority");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
		public string Body {
			get {
				return this._body;
			}
			set {
				if ((value != this._body)) {
					this.OnPropertyChanging("Body", this._body);
					this._body = value;
					this.OnPropertyChanged("Body");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EstimatedHours", Storage="_estimatedHours", FieldType="Number")]
		public System.Nullable<double> EstimatedHours {
			get {
				return this._estimatedHours;
			}
			set {
				if ((value != this._estimatedHours)) {
					this.OnPropertyChanging("EstimatedHours", this._estimatedHours);
					this._estimatedHours = value;
					this.OnPropertyChanged("EstimatedHours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Hours", Storage="_hours", FieldType="Number")]
		public System.Nullable<double> Hours {
			get {
				return this._hours;
			}
			set {
				if ((value != this._hours)) {
					this.OnPropertyChanging("Hours", this._hours);
					this._hours = value;
					this.OnPropertyChanged("Hours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="RequirementsType", Storage="_requirementsType", FieldType="Choice")]
		public System.Nullable<RequirementsType> RequirementsType {
			get {
				return this._requirementsType;
			}
			set {
				if ((value != this._requirementsType)) {
					this.OnPropertyChanging("RequirementsType", this._requirementsType);
					this._requirementsType = value;
					this.OnPropertyChanged("RequirementsType");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Requirements2ProjectsTitle", Storage="_requirements2ProjectsTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
		public Projects Requirements2ProjectsTitle {
			get {
				return this._requirements2ProjectsTitle.GetEntity();
			}
			set {
				this._requirements2ProjectsTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Requirements2MilestoneTitle", Storage="_requirements2MilestoneTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Milestone")]
		public Milestone Requirements2MilestoneTitle {
			get {
				return this._requirements2MilestoneTitle.GetEntity();
			}
			set {
				this._requirements2MilestoneTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2RequirementsTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		private void OnRequirements2ProjectsTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Requirements2ProjectsTitle", this._requirements2ProjectsTitle.Clone());
		}
		
		private void OnRequirements2ProjectsTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Requirements2ProjectsTitle");
		}
		
		private void OnRequirements2ProjectsTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Requirements.Add(this);
			}
			else {
				e.Item.Requirements.Remove(this);
			}
		}
		
		private void OnRequirements2MilestoneTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Requirements2MilestoneTitle", this._requirements2MilestoneTitle.Clone());
		}
		
		private void OnRequirements2MilestoneTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Requirements2MilestoneTitle");
		}
		
		private void OnRequirements2MilestoneTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Requirements.Add(this);
			}
			else {
				e.Item.Requirements.Remove(this);
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2RequirementsTitle = this;
			}
			else {
				e.Item.Task2RequirementsTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Resolution Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Resolution", Id="0x010088405BE8A9C847F89E13957FBA7E2D59")]
	public partial class Resolution : Element {
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Resolution() {
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2SResolutionTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2SResolutionTitle = this;
			}
			else {
				e.Item.Task2SResolutionTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Resources Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Resources", Id="0x010091A504EC7E3342BDB25EFEB93B60A5FA")]
	public partial class Resources : Element {
		
		private string _jobTitle;
		
		private string _eMail;
		
		private Microsoft.SharePoint.Linq.EntitySet<Estimation> _estimation;
		
		private Microsoft.SharePoint.Linq.EntitySet<Projects> _projects;
		
		private System.Nullable<int> _employeeADAccountIdentyfikator;
		
		private string _employeeADAccountTitle;
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		private Microsoft.SharePoint.Linq.EntitySet<Workload> _workload;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Resources() {
			this._estimation = new Microsoft.SharePoint.Linq.EntitySet<Estimation>();
			this._estimation.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Estimation>>(this.OnEstimationSync);
			this._estimation.OnChanged += new System.EventHandler(this.OnEstimationChanged);
			this._estimation.OnChanging += new System.EventHandler(this.OnEstimationChanging);
			this._projects = new Microsoft.SharePoint.Linq.EntitySet<Projects>();
			this._projects.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnProjectsSync);
			this._projects.OnChanged += new System.EventHandler(this.OnProjectsChanged);
			this._projects.OnChanging += new System.EventHandler(this.OnProjectsChanging);
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this._workload = new Microsoft.SharePoint.Linq.EntitySet<Workload>();
			this._workload.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload>>(this.OnWorkloadSync);
			this._workload.OnChanged += new System.EventHandler(this.OnWorkloadChanged);
			this._workload.OnChanging += new System.EventHandler(this.OnWorkloadChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="JobTitle", Storage="_jobTitle", FieldType="Text")]
		public string JobTitle {
			get {
				return this._jobTitle;
			}
			set {
				if ((value != this._jobTitle)) {
					this.OnPropertyChanging("JobTitle", this._jobTitle);
					this._jobTitle = value;
					this.OnPropertyChanged("JobTitle");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EMail", Storage="_eMail", FieldType="Text")]
		public string EMail {
			get {
				return this._eMail;
			}
			set {
				if ((value != this._eMail)) {
					this.OnPropertyChanging("EMail", this._eMail);
					this._eMail = value;
					this.OnPropertyChanged("EMail");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Estimation2ResourcesTitle", Storage="_estimation", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Estimation")]
		public Microsoft.SharePoint.Linq.EntitySet<Estimation> Estimation {
			get {
				return this._estimation;
			}
			set {
				this._estimation.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2ResourcesTitle", Storage="_projects", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Projects")]
		public Microsoft.SharePoint.Linq.EntitySet<Projects> Projects {
			get {
				return this._projects;
			}
			set {
				this._projects.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EmployeeADAccount", Storage="_employeeADAccountIdentyfikator", FieldType="User", IsLookupId=true)]
		public System.Nullable<int> EmployeeADAccountIdentyfikator {
			get {
				return this._employeeADAccountIdentyfikator;
			}
			set {
				if ((value != this._employeeADAccountIdentyfikator)) {
					this.OnPropertyChanging("EmployeeADAccountIdentyfikator", this._employeeADAccountIdentyfikator);
					this._employeeADAccountIdentyfikator = value;
					this.OnPropertyChanged("EmployeeADAccountIdentyfikator");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EmployeeADAccount", Storage="_employeeADAccountTitle", ReadOnly=true, FieldType="User", IsLookupValue=true)]
		public string EmployeeADAccountTitle {
			get {
				return this._employeeADAccountTitle;
			}
			set {
				if ((value != this._employeeADAccountTitle)) {
					this.OnPropertyChanging("EmployeeADAccountTitle", this._employeeADAccountTitle);
					this._employeeADAccountTitle = value;
					this.OnPropertyChanged("EmployeeADAccountTitle");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2ResourcesTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2ResourcesTitle", Storage="_workload", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Workload")]
		public Microsoft.SharePoint.Linq.EntitySet<Workload> Workload {
			get {
				return this._workload;
			}
			set {
				this._workload.Assign(value);
			}
		}
		
		private void OnEstimationChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Estimation", this._estimation.Clone());
		}
		
		private void OnEstimationChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Estimation");
		}
		
		private void OnEstimationSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Estimation> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Estimation2ResourcesTitle = this;
			}
			else {
				e.Item.Estimation2ResourcesTitle = null;
			}
		}
		
		private void OnProjectsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Projects", this._projects.Clone());
		}
		
		private void OnProjectsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Projects");
		}
		
		private void OnProjectsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Project2ResourcesTitle = this;
			}
			else {
				e.Item.Project2ResourcesTitle = null;
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2ResourcesTitle = this;
			}
			else {
				e.Item.Task2ResourcesTitle = null;
			}
		}
		
		private void OnWorkloadChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload", this._workload.Clone());
		}
		
		private void OnWorkloadChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload");
		}
		
		private void OnWorkloadSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload2ResourcesTitle = this;
			}
			else {
				e.Item.Workload2ResourcesTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Stage Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Stage", Id="0x010085603184410F43E88BC6CCE5BE613389")]
	public partial class Stage : Element {
		
		private Microsoft.SharePoint.Linq.EntitySet<Milestone> _milestone;
		
		private Microsoft.SharePoint.Linq.EntitySet<Projects> _projects;
		
		private Microsoft.SharePoint.Linq.EntitySet<Workload> _workload;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Stage() {
			this._milestone = new Microsoft.SharePoint.Linq.EntitySet<Milestone>();
			this._milestone.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone>>(this.OnMilestoneSync);
			this._milestone.OnChanged += new System.EventHandler(this.OnMilestoneChanged);
			this._milestone.OnChanging += new System.EventHandler(this.OnMilestoneChanging);
			this._projects = new Microsoft.SharePoint.Linq.EntitySet<Projects>();
			this._projects.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnProjectsSync);
			this._projects.OnChanged += new System.EventHandler(this.OnProjectsChanged);
			this._projects.OnChanging += new System.EventHandler(this.OnProjectsChanging);
			this._workload = new Microsoft.SharePoint.Linq.EntitySet<Workload>();
			this._workload.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload>>(this.OnWorkloadSync);
			this._workload.OnChanged += new System.EventHandler(this.OnWorkloadChanged);
			this._workload.OnChanging += new System.EventHandler(this.OnWorkloadChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone2StageTitle", Storage="_milestone", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Milestone")]
		public Microsoft.SharePoint.Linq.EntitySet<Milestone> Milestone {
			get {
				return this._milestone;
			}
			set {
				this._milestone.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project2StageTitle", Storage="_projects", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Projects")]
		public Microsoft.SharePoint.Linq.EntitySet<Projects> Projects {
			get {
				return this._projects;
			}
			set {
				this._projects.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2StageTitle", Storage="_workload", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Workload")]
		public Microsoft.SharePoint.Linq.EntitySet<Workload> Workload {
			get {
				return this._workload;
			}
			set {
				this._workload.Assign(value);
			}
		}
		
		private void OnMilestoneChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Milestone", this._milestone.Clone());
		}
		
		private void OnMilestoneChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Milestone");
		}
		
		private void OnMilestoneSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Milestone2StageTitle = this;
			}
			else {
				e.Item.Milestone2StageTitle = null;
			}
		}
		
		private void OnProjectsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Projects", this._projects.Clone());
		}
		
		private void OnProjectsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Projects");
		}
		
		private void OnProjectsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Project2StageTitle = this;
			}
			else {
				e.Item.Project2StageTitle = null;
			}
		}
		
		private void OnWorkloadChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload", this._workload.Clone());
		}
		
		private void OnWorkloadChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload");
		}
		
		private void OnWorkloadSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload2StageTitle = this;
			}
			else {
				e.Item.Workload2StageTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Status Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Status", Id="0x0100798F904919E54652B0BBC121E7F6A818")]
	public partial class Status : Element {
		
		private System.Nullable<bool> _active;
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Status() {
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Active", Storage="_active", FieldType="Boolean")]
		public System.Nullable<bool> Active {
			get {
				return this._active;
			}
			set {
				if ((value != this._active)) {
					this.OnPropertyChanging("Active", this._active);
					this._active = value;
					this.OnPropertyChanged("Active");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2StatusTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2StatusTitle = this;
			}
			else {
				e.Item.Task2StatusTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Tasks Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Tasks", Id="0x01005D39260836CE498D8E0D443AD5CAD3AC")]
	public partial class Tasks : Element {
		
		private string _body;
		
		private System.Nullable<System.DateTime> _taskStart;
		
		private System.Nullable<System.DateTime> _taskEnd;
		
		private System.Nullable<System.DateTime> _baselineStart;
		
		private System.Nullable<System.DateTime> _baselineEnd;
		
		private System.Nullable<bool> _active;
		
		private Microsoft.SharePoint.Linq.EntityRef<Projects> _task2ProjectTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Category> _task2CategoryTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Resources> _task2ResourcesTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Milestone> _task2MilestoneDefinedInTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Milestone> _task2MilestoneResolvedInTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Requirements> _task2RequirementsTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Status> _task2StatusTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Priority> _task2SPriorityTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Resolution> _task2SResolutionTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Type> _task2TypeTitle;
		
		private Microsoft.SharePoint.Linq.EntitySet<TaskComments> _taskComments;
		
		private Microsoft.SharePoint.Linq.EntitySet<Workload> _workload;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Tasks() {
			this._task2ProjectTitle = new Microsoft.SharePoint.Linq.EntityRef<Projects>();
			this._task2ProjectTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnTask2ProjectTitleSync);
			this._task2ProjectTitle.OnChanged += new System.EventHandler(this.OnTask2ProjectTitleChanged);
			this._task2ProjectTitle.OnChanging += new System.EventHandler(this.OnTask2ProjectTitleChanging);
			this._task2CategoryTitle = new Microsoft.SharePoint.Linq.EntityRef<Category>();
			this._task2CategoryTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Category>>(this.OnTask2CategoryTitleSync);
			this._task2CategoryTitle.OnChanged += new System.EventHandler(this.OnTask2CategoryTitleChanged);
			this._task2CategoryTitle.OnChanging += new System.EventHandler(this.OnTask2CategoryTitleChanging);
			this._task2ResourcesTitle = new Microsoft.SharePoint.Linq.EntityRef<Resources>();
			this._task2ResourcesTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources>>(this.OnTask2ResourcesTitleSync);
			this._task2ResourcesTitle.OnChanged += new System.EventHandler(this.OnTask2ResourcesTitleChanged);
			this._task2ResourcesTitle.OnChanging += new System.EventHandler(this.OnTask2ResourcesTitleChanging);
			this._task2MilestoneDefinedInTitle = new Microsoft.SharePoint.Linq.EntityRef<Milestone>();
			this._task2MilestoneDefinedInTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone>>(this.OnTask2MilestoneDefinedInTitleSync);
			this._task2MilestoneDefinedInTitle.OnChanged += new System.EventHandler(this.OnTask2MilestoneDefinedInTitleChanged);
			this._task2MilestoneDefinedInTitle.OnChanging += new System.EventHandler(this.OnTask2MilestoneDefinedInTitleChanging);
			this._task2MilestoneResolvedInTitle = new Microsoft.SharePoint.Linq.EntityRef<Milestone>();
			this._task2MilestoneResolvedInTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone>>(this.OnTask2MilestoneResolvedInTitleSync);
			this._task2MilestoneResolvedInTitle.OnChanged += new System.EventHandler(this.OnTask2MilestoneResolvedInTitleChanged);
			this._task2MilestoneResolvedInTitle.OnChanging += new System.EventHandler(this.OnTask2MilestoneResolvedInTitleChanging);
			this._task2RequirementsTitle = new Microsoft.SharePoint.Linq.EntityRef<Requirements>();
			this._task2RequirementsTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Requirements>>(this.OnTask2RequirementsTitleSync);
			this._task2RequirementsTitle.OnChanged += new System.EventHandler(this.OnTask2RequirementsTitleChanged);
			this._task2RequirementsTitle.OnChanging += new System.EventHandler(this.OnTask2RequirementsTitleChanging);
			this._task2StatusTitle = new Microsoft.SharePoint.Linq.EntityRef<Status>();
			this._task2StatusTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Status>>(this.OnTask2StatusTitleSync);
			this._task2StatusTitle.OnChanged += new System.EventHandler(this.OnTask2StatusTitleChanged);
			this._task2StatusTitle.OnChanging += new System.EventHandler(this.OnTask2StatusTitleChanging);
			this._task2SPriorityTitle = new Microsoft.SharePoint.Linq.EntityRef<Priority>();
			this._task2SPriorityTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Priority>>(this.OnTask2SPriorityTitleSync);
			this._task2SPriorityTitle.OnChanged += new System.EventHandler(this.OnTask2SPriorityTitleChanged);
			this._task2SPriorityTitle.OnChanging += new System.EventHandler(this.OnTask2SPriorityTitleChanging);
			this._task2SResolutionTitle = new Microsoft.SharePoint.Linq.EntityRef<Resolution>();
			this._task2SResolutionTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resolution>>(this.OnTask2SResolutionTitleSync);
			this._task2SResolutionTitle.OnChanged += new System.EventHandler(this.OnTask2SResolutionTitleChanged);
			this._task2SResolutionTitle.OnChanging += new System.EventHandler(this.OnTask2SResolutionTitleChanging);
			this._task2TypeTitle = new Microsoft.SharePoint.Linq.EntityRef<Type>();
			this._task2TypeTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Type>>(this.OnTask2TypeTitleSync);
			this._task2TypeTitle.OnChanged += new System.EventHandler(this.OnTask2TypeTitleChanged);
			this._task2TypeTitle.OnChanging += new System.EventHandler(this.OnTask2TypeTitleChanging);
			this._taskComments = new Microsoft.SharePoint.Linq.EntitySet<TaskComments>();
			this._taskComments.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<TaskComments>>(this.OnTaskCommentsSync);
			this._taskComments.OnChanged += new System.EventHandler(this.OnTaskCommentsChanged);
			this._taskComments.OnChanging += new System.EventHandler(this.OnTaskCommentsChanging);
			this._workload = new Microsoft.SharePoint.Linq.EntitySet<Workload>();
			this._workload.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload>>(this.OnWorkloadSync);
			this._workload.OnChanged += new System.EventHandler(this.OnWorkloadChanged);
			this._workload.OnChanging += new System.EventHandler(this.OnWorkloadChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
		public string Body {
			get {
				return this._body;
			}
			set {
				if ((value != this._body)) {
					this.OnPropertyChanging("Body", this._body);
					this._body = value;
					this.OnPropertyChanged("Body");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="TaskStart", Storage="_taskStart", FieldType="DateTime")]
		public System.Nullable<System.DateTime> TaskStart {
			get {
				return this._taskStart;
			}
			set {
				if ((value != this._taskStart)) {
					this.OnPropertyChanging("TaskStart", this._taskStart);
					this._taskStart = value;
					this.OnPropertyChanged("TaskStart");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="TaskEnd", Storage="_taskEnd", FieldType="DateTime")]
		public System.Nullable<System.DateTime> TaskEnd {
			get {
				return this._taskEnd;
			}
			set {
				if ((value != this._taskEnd)) {
					this.OnPropertyChanging("TaskEnd", this._taskEnd);
					this._taskEnd = value;
					this.OnPropertyChanged("TaskEnd");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="BaselineStart", Storage="_baselineStart", FieldType="DateTime")]
		public System.Nullable<System.DateTime> BaselineStart {
			get {
				return this._baselineStart;
			}
			set {
				if ((value != this._baselineStart)) {
					this.OnPropertyChanging("BaselineStart", this._baselineStart);
					this._baselineStart = value;
					this.OnPropertyChanged("BaselineStart");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="BaselineEnd", Storage="_baselineEnd", FieldType="DateTime")]
		public System.Nullable<System.DateTime> BaselineEnd {
			get {
				return this._baselineEnd;
			}
			set {
				if ((value != this._baselineEnd)) {
					this.OnPropertyChanging("BaselineEnd", this._baselineEnd);
					this._baselineEnd = value;
					this.OnPropertyChanged("BaselineEnd");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Active", Storage="_active", FieldType="Boolean")]
		public System.Nullable<bool> Active {
			get {
				return this._active;
			}
			set {
				if ((value != this._active)) {
					this.OnPropertyChanging("Active", this._active);
					this._active = value;
					this.OnPropertyChanged("Active");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2ProjectTitle", Storage="_task2ProjectTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
		public Projects Task2ProjectTitle {
			get {
				return this._task2ProjectTitle.GetEntity();
			}
			set {
				this._task2ProjectTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2CategoryTitle", Storage="_task2CategoryTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Category")]
		public Category Task2CategoryTitle {
			get {
				return this._task2CategoryTitle.GetEntity();
			}
			set {
				this._task2CategoryTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2ResourcesTitle", Storage="_task2ResourcesTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Resources")]
		public Resources Task2ResourcesTitle {
			get {
				return this._task2ResourcesTitle.GetEntity();
			}
			set {
				this._task2ResourcesTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2MilestoneDefinedInTitle", Storage="_task2MilestoneDefinedInTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Milestone")]
		public Milestone Task2MilestoneDefinedInTitle {
			get {
				return this._task2MilestoneDefinedInTitle.GetEntity();
			}
			set {
				this._task2MilestoneDefinedInTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2MilestoneResolvedInTitle", Storage="_task2MilestoneResolvedInTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Milestone")]
		public Milestone Task2MilestoneResolvedInTitle {
			get {
				return this._task2MilestoneResolvedInTitle.GetEntity();
			}
			set {
				this._task2MilestoneResolvedInTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2RequirementsTitle", Storage="_task2RequirementsTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Requirements")]
		public Requirements Task2RequirementsTitle {
			get {
				return this._task2RequirementsTitle.GetEntity();
			}
			set {
				this._task2RequirementsTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2StatusTitle", Storage="_task2StatusTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Status")]
		public Status Task2StatusTitle {
			get {
				return this._task2StatusTitle.GetEntity();
			}
			set {
				this._task2StatusTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2SPriorityTitle", Storage="_task2SPriorityTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Priority")]
		public Priority Task2SPriorityTitle {
			get {
				return this._task2SPriorityTitle.GetEntity();
			}
			set {
				this._task2SPriorityTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2SResolutionTitle", Storage="_task2SResolutionTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Resolution")]
		public Resolution Task2SResolutionTitle {
			get {
				return this._task2SResolutionTitle.GetEntity();
			}
			set {
				this._task2SResolutionTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2TypeTitle", Storage="_task2TypeTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Type")]
		public Type Task2TypeTitle {
			get {
				return this._task2TypeTitle.GetEntity();
			}
			set {
				this._task2TypeTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="TaskComments2TaskTitle", Storage="_taskComments", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task comments")]
		public Microsoft.SharePoint.Linq.EntitySet<TaskComments> TaskComments {
			get {
				return this._taskComments;
			}
			set {
				this._taskComments.Assign(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2TaskTitle", Storage="_workload", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Workload")]
		public Microsoft.SharePoint.Linq.EntitySet<Workload> Workload {
			get {
				return this._workload;
			}
			set {
				this._workload.Assign(value);
			}
		}
		
		private void OnTask2ProjectTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2ProjectTitle", this._task2ProjectTitle.Clone());
		}
		
		private void OnTask2ProjectTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2ProjectTitle");
		}
		
		private void OnTask2ProjectTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2CategoryTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2CategoryTitle", this._task2CategoryTitle.Clone());
		}
		
		private void OnTask2CategoryTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2CategoryTitle");
		}
		
		private void OnTask2CategoryTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Category> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2ResourcesTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2ResourcesTitle", this._task2ResourcesTitle.Clone());
		}
		
		private void OnTask2ResourcesTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2ResourcesTitle");
		}
		
		private void OnTask2ResourcesTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2MilestoneDefinedInTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2MilestoneDefinedInTitle", this._task2MilestoneDefinedInTitle.Clone());
		}
		
		private void OnTask2MilestoneDefinedInTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2MilestoneDefinedInTitle");
		}
		
		private void OnTask2MilestoneDefinedInTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2MilestoneResolvedInTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2MilestoneResolvedInTitle", this._task2MilestoneResolvedInTitle.Clone());
		}
		
		private void OnTask2MilestoneResolvedInTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2MilestoneResolvedInTitle");
		}
		
		private void OnTask2MilestoneResolvedInTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Milestone> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks0.Add(this);
			}
			else {
				e.Item.Tasks0.Remove(this);
			}
		}
		
		private void OnTask2RequirementsTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2RequirementsTitle", this._task2RequirementsTitle.Clone());
		}
		
		private void OnTask2RequirementsTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2RequirementsTitle");
		}
		
		private void OnTask2RequirementsTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Requirements> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2StatusTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2StatusTitle", this._task2StatusTitle.Clone());
		}
		
		private void OnTask2StatusTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2StatusTitle");
		}
		
		private void OnTask2StatusTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Status> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2SPriorityTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2SPriorityTitle", this._task2SPriorityTitle.Clone());
		}
		
		private void OnTask2SPriorityTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2SPriorityTitle");
		}
		
		private void OnTask2SPriorityTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Priority> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2SResolutionTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2SResolutionTitle", this._task2SResolutionTitle.Clone());
		}
		
		private void OnTask2SResolutionTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2SResolutionTitle");
		}
		
		private void OnTask2SResolutionTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resolution> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTask2TypeTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Task2TypeTitle", this._task2TypeTitle.Clone());
		}
		
		private void OnTask2TypeTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Task2TypeTitle");
		}
		
		private void OnTask2TypeTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Type> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Tasks.Add(this);
			}
			else {
				e.Item.Tasks.Remove(this);
			}
		}
		
		private void OnTaskCommentsChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("TaskComments", this._taskComments.Clone());
		}
		
		private void OnTaskCommentsChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("TaskComments");
		}
		
		private void OnTaskCommentsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<TaskComments> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.TaskComments2TaskTitle = this;
			}
			else {
				e.Item.TaskComments2TaskTitle = null;
			}
		}
		
		private void OnWorkloadChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload", this._workload.Clone());
		}
		
		private void OnWorkloadChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload");
		}
		
		private void OnWorkloadSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Workload> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload2TaskTitle = this;
			}
			else {
				e.Item.Workload2TaskTitle = null;
			}
		}

  }
	
	/// <summary>
	/// Task Comments Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="TaskComments", Id="0x0100E615647B0FDE44E6AE8B778DFC56438D")]
	public partial class TaskComments : Element {
		
		private string _body;
		
		private Microsoft.SharePoint.Linq.EntityRef<Tasks> _taskComments2TaskTitle;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public TaskComments() {
			this._taskComments2TaskTitle = new Microsoft.SharePoint.Linq.EntityRef<Tasks>();
			this._taskComments2TaskTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTaskComments2TaskTitleSync);
			this._taskComments2TaskTitle.OnChanged += new System.EventHandler(this.OnTaskComments2TaskTitleChanged);
			this._taskComments2TaskTitle.OnChanging += new System.EventHandler(this.OnTaskComments2TaskTitleChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
		public string Body {
			get {
				return this._body;
			}
			set {
				if ((value != this._body)) {
					this.OnPropertyChanging("Body", this._body);
					this._body = value;
					this.OnPropertyChanged("Body");
				}
			}
		}
		
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
		[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
		public override string Title {
			get {
				throw new System.InvalidOperationException("Pole Title zostało usunięte z typu zawartości TaskComments.");
			}
			set {
				throw new System.InvalidOperationException("Pole Title zostało usunięte z typu zawartości TaskComments.");
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="TaskComments2TaskTitle", Storage="_taskComments2TaskTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Task")]
		public Tasks TaskComments2TaskTitle {
			get {
				return this._taskComments2TaskTitle.GetEntity();
			}
			set {
				this._taskComments2TaskTitle.SetEntity(value);
			}
		}
		
		private void OnTaskComments2TaskTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("TaskComments2TaskTitle", this._taskComments2TaskTitle.Clone());
		}
		
		private void OnTaskComments2TaskTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("TaskComments2TaskTitle");
		}
		
		private void OnTaskComments2TaskTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.TaskComments.Add(this);
			}
			else {
				e.Item.TaskComments.Remove(this);
			}
		}
	}
	
	/// <summary>
	/// Type Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Type", Id="0x01004D5362E631BA41C39E9A3D2364D55EFB")]
	public partial class Type : Element {
		
		private Microsoft.SharePoint.Linq.EntitySet<Tasks> _tasks;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Type() {
			this._tasks = new Microsoft.SharePoint.Linq.EntitySet<Tasks>();
			this._tasks.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnTasksSync);
			this._tasks.OnChanged += new System.EventHandler(this.OnTasksChanged);
			this._tasks.OnChanging += new System.EventHandler(this.OnTasksChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Task2TypeTitle", Storage="_tasks", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Task")]
		public Microsoft.SharePoint.Linq.EntitySet<Tasks> Tasks {
			get {
				return this._tasks;
			}
			set {
				this._tasks.Assign(value);
			}
		}
		
		private void OnTasksChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Tasks", this._tasks.Clone());
		}
		
		private void OnTasksChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Tasks");
		}
		
		private void OnTasksSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Task2TypeTitle = this;
			}
			else {
				e.Item.Task2TypeTitle = null;
			}
		}
	}
	
	/// <summary>
	/// Workload Content Type
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Workload", Id="0x0100CE075A94AA894CDAA771E6A734832A77")]
	public partial class Workload : Element {
		
		private System.Nullable<System.DateTime> _workloadDate;
		
		private System.Nullable<double> _hours;
		
		private System.Nullable<int> _weekNumber;
		
		private System.Nullable<int> _year;
		
		private System.Nullable<bool> _readOnly;
		
		private Microsoft.SharePoint.Linq.EntityRef<Projects> _workload2ProjectTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Tasks> _workload2TaskTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Stage> _workload2StageTitle;
		
		private Microsoft.SharePoint.Linq.EntityRef<Resources> _workload2ResourcesTitle;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public Workload() {
			this._workload2ProjectTitle = new Microsoft.SharePoint.Linq.EntityRef<Projects>();
			this._workload2ProjectTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects>>(this.OnWorkload2ProjectTitleSync);
			this._workload2ProjectTitle.OnChanged += new System.EventHandler(this.OnWorkload2ProjectTitleChanged);
			this._workload2ProjectTitle.OnChanging += new System.EventHandler(this.OnWorkload2ProjectTitleChanging);
			this._workload2TaskTitle = new Microsoft.SharePoint.Linq.EntityRef<Tasks>();
			this._workload2TaskTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks>>(this.OnWorkload2TaskTitleSync);
			this._workload2TaskTitle.OnChanged += new System.EventHandler(this.OnWorkload2TaskTitleChanged);
			this._workload2TaskTitle.OnChanging += new System.EventHandler(this.OnWorkload2TaskTitleChanging);
			this._workload2StageTitle = new Microsoft.SharePoint.Linq.EntityRef<Stage>();
			this._workload2StageTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Stage>>(this.OnWorkload2StageTitleSync);
			this._workload2StageTitle.OnChanged += new System.EventHandler(this.OnWorkload2StageTitleChanged);
			this._workload2StageTitle.OnChanging += new System.EventHandler(this.OnWorkload2StageTitleChanging);
			this._workload2ResourcesTitle = new Microsoft.SharePoint.Linq.EntityRef<Resources>();
			this._workload2ResourcesTitle.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources>>(this.OnWorkload2ResourcesTitleSync);
			this._workload2ResourcesTitle.OnChanged += new System.EventHandler(this.OnWorkload2ResourcesTitleChanged);
			this._workload2ResourcesTitle.OnChanging += new System.EventHandler(this.OnWorkload2ResourcesTitleChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WorkloadDate", Storage="_workloadDate", FieldType="DateTime")]
		public System.Nullable<System.DateTime> WorkloadDate {
			get {
				return this._workloadDate;
			}
			set {
				if ((value != this._workloadDate)) {
					this.OnPropertyChanging("WorkloadDate", this._workloadDate);
					this._workloadDate = value;
					this.OnPropertyChanged("WorkloadDate");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Hours", Storage="_hours", FieldType="Number")]
		public System.Nullable<double> Hours {
			get {
				return this._hours;
			}
			set {
				if ((value != this._hours)) {
					this.OnPropertyChanging("Hours", this._hours);
					this._hours = value;
					this.OnPropertyChanged("Hours");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WeekNumber", Storage="_weekNumber", FieldType="Integer")]
		public System.Nullable<int> WeekNumber {
			get {
				return this._weekNumber;
			}
			set {
				if ((value != this._weekNumber)) {
					this.OnPropertyChanging("WeekNumber", this._weekNumber);
					this._weekNumber = value;
					this.OnPropertyChanged("WeekNumber");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Year", Storage="_year", FieldType="Integer")]
		public System.Nullable<int> Year {
			get {
				return this._year;
			}
			set {
				if ((value != this._year)) {
					this.OnPropertyChanging("Year", this._year);
					this._year = value;
					this.OnPropertyChanged("Year");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ReadOnly", Storage="_readOnly", FieldType="Boolean")]
		public System.Nullable<bool> ReadOnly {
			get {
				return this._readOnly;
			}
			set {
				if ((value != this._readOnly)) {
					this.OnPropertyChanging("ReadOnly", this._readOnly);
					this._readOnly = value;
					this.OnPropertyChanged("ReadOnly");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2ProjectTitle", Storage="_workload2ProjectTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
		public Projects Workload2ProjectTitle {
			get {
				return this._workload2ProjectTitle.GetEntity();
			}
			set {
				this._workload2ProjectTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2TaskTitle", Storage="_workload2TaskTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Task")]
		public Tasks Workload2TaskTitle {
			get {
				return this._workload2TaskTitle.GetEntity();
			}
			set {
				this._workload2TaskTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2StageTitle", Storage="_workload2StageTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Stage")]
		public Stage Workload2StageTitle {
			get {
				return this._workload2StageTitle.GetEntity();
			}
			set {
				this._workload2StageTitle.SetEntity(value);
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Workload2ResourcesTitle", Storage="_workload2ResourcesTitle", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Resources")]
		public Resources Workload2ResourcesTitle {
			get {
				return this._workload2ResourcesTitle.GetEntity();
			}
			set {
				this._workload2ResourcesTitle.SetEntity(value);
			}
		}
		
		private void OnWorkload2ProjectTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload2ProjectTitle", this._workload2ProjectTitle.Clone());
		}
		
		private void OnWorkload2ProjectTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload2ProjectTitle");
		}
		
		private void OnWorkload2ProjectTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Projects> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload.Add(this);
			}
			else {
				e.Item.Workload.Remove(this);
			}
		}
		
		private void OnWorkload2TaskTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload2TaskTitle", this._workload2TaskTitle.Clone());
		}
		
		private void OnWorkload2TaskTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload2TaskTitle");
		}
		
		private void OnWorkload2TaskTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Tasks> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload.Add(this);
			}
			else {
				e.Item.Workload.Remove(this);
			}
		}
		
		private void OnWorkload2StageTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload2StageTitle", this._workload2StageTitle.Clone());
		}
		
		private void OnWorkload2StageTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload2StageTitle");
		}
		
		private void OnWorkload2StageTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Stage> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload.Add(this);
			}
			else {
				e.Item.Workload.Remove(this);
			}
		}
		
		private void OnWorkload2ResourcesTitleChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("Workload2ResourcesTitle", this._workload2ResourcesTitle.Clone());
		}
		
		private void OnWorkload2ResourcesTitleChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("Workload2ResourcesTitle");
		}
		
		private void OnWorkload2ResourcesTitleSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Resources> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.Workload.Add(this);
			}
			else {
				e.Item.Workload.Remove(this);
			}
		}
	}
	
	/// <summary>
	/// Utwórz nową stronę wzorcową.
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Strona wzorcowa", Id="0x010105", List="Master Page Gallery")]
	public partial class MasterPageGalleryStronaWzorcowa : StronaWzorcowa {
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public MasterPageGalleryStronaWzorcowa() {
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="MasterPageDescription", Storage="_description", FieldType="Note")]
		public override string Description {
			get {
				return this._description;
			}
			set {
				if ((value != this._description)) {
					this.OnPropertyChanging("Description", this._description);
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
		[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
		public override string Title {
			get {
				throw new System.InvalidOperationException("Pole Title zostało usunięte z typu zawartości Strona wzorcowa.");
			}
			set {
				throw new System.InvalidOperationException("Pole Title zostało usunięte z typu zawartości Strona wzorcowa.");
			}
		}
	}
	
	[System.FlagsAttribute()]
	public enum UIVersion : int {
		
		None = 0,
		
		Invalid = 1,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="3")]
		_3 = 2,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="4")]
		_4 = 4,
	}
	
	public enum Currency : int {
		
		None = 0,
		
		Invalid = 1,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="PLN")]
		PLN = 2,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="USD")]
		USD = 4,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="EUR")]
		EUR = 8,
	}
	
	public enum ProjectType : int {
		
		None = 0,
		
		Invalid = 1,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Office")]
		Office = 2,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Marketing")]
		Marketing = 4,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Project - commercial")]
		ProjectCommercial = 8,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Project - internal")]
		ProjectInternal = 16,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Project - conception")]
		ProjectConception = 32,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="After sales services")]
		AfterSalesServices = 64,
	}
	
	public enum RequirementsType : int {
		
		None = 0,
		
		Invalid = 1,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Functional")]
		Functional = 2,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Non-Functional")]
		NonFunctional = 4,
	}
}
#pragma warning restore 1591